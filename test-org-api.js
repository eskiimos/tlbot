// –¢–µ—Å—Ç API –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
async function testOrganizationAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...');
  
  const testData = {
    contactName: '–ù–æ–≤–æ–µ –∏–º—è',
    inn: '7777777777',
    phone: '+7 (999) 888-77-66',
    email: 'new@test.com',
    user: {
      id: 12345,
      first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
      username: 'test_user'
    }
  };
  
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/organizations');
    console.log('üìã –î–∞–Ω–Ω—ã–µ:', testData);
    
    const response = await fetch('/api/organizations', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData),
    });
    
    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', result);
    } else {
      const error = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞:', response.status, error);
    }
    
  } catch (error) {
    console.error('‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testOrganizationAPI();
