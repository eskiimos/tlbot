import React, { useState, useEffect } from 'react';
import Image from 'next/image';

interface UserData {
  telegramId?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  email?: string;
  companyName?: string;
  inn?: string;
}

interface ProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  userData: UserData | null;
  onSave: (data: UserData) => void;
}

const ProfileModal: React.FC<ProfileModalProps> = ({
  isOpen,
  onClose,
  userData,
  onSave
}) => {
  const [formData, setFormData] = useState<UserData>({
    firstName: '',
    lastName: '',
    phoneNumber: '',
    email: '',
    companyName: '',
    inn: ''
  });

  const [errors, setErrors] = useState<{[key: string]: string}>({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const formatPhoneNumber = (value: string) => {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const numbers = value.replace(/\D/g, '');
    
    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    const normalizedNumbers = numbers.startsWith('8') ? '7' + numbers.slice(1) : numbers;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É +7 (999) 999-99-99
    if (normalizedNumbers.length === 0) return '';
    if (normalizedNumbers.length === 1) return `+${normalizedNumbers}`;
    if (normalizedNumbers.length <= 4) return `+${normalizedNumbers.slice(0, 1)} (${normalizedNumbers.slice(1)}`;
    if (normalizedNumbers.length <= 7) {
      return `+${normalizedNumbers.slice(0, 1)} (${normalizedNumbers.slice(1, 4)}) ${normalizedNumbers.slice(4)}`;
    }
    if (normalizedNumbers.length <= 9) {
      return `+${normalizedNumbers.slice(0, 1)} (${normalizedNumbers.slice(1, 4)}) ${normalizedNumbers.slice(4, 7)}-${normalizedNumbers.slice(7)}`;
    }
    return `+${normalizedNumbers.slice(0, 1)} (${normalizedNumbers.slice(1, 4)}) ${normalizedNumbers.slice(4, 7)}-${normalizedNumbers.slice(7, 9)}-${normalizedNumbers.slice(9, 11)}`;
  };

  const handlePhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const formatted = formatPhoneNumber(e.target.value);
    setFormData(prev => ({ ...prev, phoneNumber: formatted }));
    if (errors.phoneNumber) {
      setErrors(prev => ({ ...prev, phoneNumber: '' }));
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const savedData = localStorage.getItem('userProfileData');
      if (savedData) {
        try {
          const parsed = JSON.parse(savedData);
          setFormData(parsed);
        } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', e);
        }
      } else if (userData) {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        setFormData({
          firstName: userData.firstName || '',
          lastName: userData.lastName || '',
          phoneNumber: userData.phoneNumber || '',
          email: userData.email || '',
          companyName: userData.companyName || '',
          inn: userData.inn || ''
        });
      }
    }
  }, [isOpen, userData]);

  const validateForm = () => {
    const newErrors: {[key: string]: string} = {};

    if (!formData.firstName?.trim()) {
      newErrors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    }

    if (!formData.phoneNumber?.trim()) {
      newErrors.phoneNumber = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const numbers = formData.phoneNumber.replace(/\D/g, '');
      if (numbers.length !== 11) {
        newErrors.phoneNumber = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSave = () => {
    if (validateForm()) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem('userProfileData', JSON.stringify(formData));
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å telegramId –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const dataToSave = {
        ...formData,
        telegramId: userData?.telegramId,
        username: userData?.username
      };
      
      onSave(dataToSave);
      onClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl w-full max-w-md max-h-[90vh] overflow-y-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="sticky top-0 bg-white border-b p-4 rounded-t-2xl">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-900">üë§ –ü—Ä–æ—Ñ–∏–ª—å</h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <Image
                src="/material-symbols_info-outline.svg"
                alt="–ó–∞–∫—Ä—ã—Ç—å"
                width={20}
                height={20}
                className="w-5 h-5 rotate-45"
              />
            </button>
          </div>
          <p className="text-sm text-gray-600 mt-1">
            –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
          </p>
          <div className="bg-blue-50 p-2 rounded-lg mt-2">
            <p className="text-xs text-blue-800">
              üí° –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ñ–æ—Ä–º–∞ –ö–ü –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            </p>
          </div>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ñ–æ—Ä–º—ã */}
        <div className="p-4 space-y-4">
          {/* –ò–º—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ò–º—è *
            </label>
            <input
              type="text"
              value={formData.firstName || ''}
              onChange={(e) => {
                setFormData(prev => ({ ...prev, firstName: e.target.value }));
                if (errors.firstName) {
                  setErrors(prev => ({ ...prev, firstName: '' }));
                }
              }}
              className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                errors.firstName ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
            />
            {errors.firstName && (
              <p className="text-red-500 text-sm mt-1">{errors.firstName}</p>
            )}
          </div>

          {/* –§–∞–º–∏–ª–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –§–∞–º–∏–ª–∏—è
            </label>
            <input
              type="text"
              value={formData.lastName || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
            />
          </div>

          {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *
            </label>
            <input
              type="tel"
              value={formData.phoneNumber || ''}
              onChange={handlePhoneChange}
              className={`w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                errors.phoneNumber ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="+7 (999) 999-99-99"
            />
            {errors.phoneNumber && (
              <p className="text-red-500 text-sm mt-1">{errors.phoneNumber}</p>
            )}
          </div>

          {/* Email */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              value={formData.email || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="your@email.com"
            />
          </div>

          {/* –ö–æ–º–ø–∞–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            </label>
            <input
              type="text"
              value={formData.companyName || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, companyName: e.target.value }))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="–û–û–û ¬´–í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è¬ª"
            />
          </div>

          {/* –ò–ù–ù */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ò–ù–ù (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <input
              type="text"
              value={formData.inn || ''}
              onChange={(e) => setFormData(prev => ({ ...prev, inn: e.target.value }))}
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="1234567890"
              maxLength={12}
            />
            <p className="text-xs text-gray-500 mt-1">
              –ò–ù–ù –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
            </p>
          </div>

          {/* Telegram –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
          {userData?.username && (
            <div className="bg-blue-50 p-3 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>Telegram:</strong> @{userData.username}
              </p>
              <p className="text-xs text-blue-600 mt-1">
                –î–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
              </p>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="sticky bottom-0 bg-white border-t p-4 rounded-b-2xl">
          <div className="flex gap-3">
            <button
              onClick={onClose}
              className="flex-1 px-4 py-3 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors font-medium"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              onClick={handleSave}
              className="flex-1 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium"
            >
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfileModal;
