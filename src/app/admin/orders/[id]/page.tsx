'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';

interface OrderItem {
  id?: string;
  productId?: string;
  productName?: string;
  name?: string; // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  productSlug?: string;
  pricePerUnit?: number;
  basePrice?: number; // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞
  totalPrice?: number; // –æ–±—â–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
  price?: number; // –µ—â–µ –æ–¥–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ü–µ–Ω–∞
  quantity?: number;
  selectedOptions?: any;
  optionsDetails?: Array<{
    id: string;
    name: string;
    price: number;
    category: string;
  }>;
  designFiles?: string[];
  designComment?: string;
  image?: string;
}

interface OrderComment {
  id: string;
  content: string;
  isAdmin: boolean;
  authorName?: string;
  createdAt: string;
}

interface Order {
  id: string;
  customerName: string;
  customerEmail?: string;
  customerPhone?: string;
  customerCompany?: string;
  totalAmount: number;
  status: string;
  items: OrderItem[];
  adminComment?: string;
  createdAt: string;
  updatedAt: string;
  comments?: OrderComment[];
  user?: {
    username: string;
    firstName: string;
    lastName: string;
  };
}

const statusLabels = {
  'NEW': 'üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
  'IN_PROGRESS': '‚öôÔ∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
  'DESIGN': 'üé® –î–∏–∑–∞–π–Ω',
  'PRODUCTION': 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
  'READY': '‚úÖ –ì–æ—Ç–æ–≤',
  'COMPLETED': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω',
  'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
};

const statusColors = {
  'NEW': 'bg-blue-100 text-blue-800',
  'IN_PROGRESS': 'bg-yellow-100 text-yellow-800',
  'DESIGN': 'bg-purple-100 text-purple-800',
  'PRODUCTION': 'bg-orange-100 text-orange-800',
  'READY': 'bg-green-100 text-green-800',
  'COMPLETED': 'bg-gray-100 text-gray-800',
  'CANCELLED': 'bg-red-100 text-red-800'
};

export default function OrderDetails() {
  const [order, setOrder] = useState<Order | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isMounted, setIsMounted] = useState(false);
  const [newStatus, setNewStatus] = useState('');
  const [adminComment, setAdminComment] = useState('');
  const [isUpdating, setIsUpdating] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const [comments, setComments] = useState<OrderComment[]>([]);
  const [newComment, setNewComment] = useState('');
  const [isAddingComment, setIsAddingComment] = useState(false);
  
  const router = useRouter();
  const params = useParams();

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useEffect(() => {
    if (isMounted) {
      checkAuth();
      if (params.id) {
        loadOrder(params.id as string);
      }
    }
  }, [params.id, isMounted]);

  const checkAuth = async () => {
    try {
      console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const response = await fetch('/api/admin/auth');
      console.log('üîê –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.status);
      
      if (!response.ok) {
        console.log('‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /admin');
        router.push('/admin');
      } else {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      }
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      router.push('/admin');
    }
  };

  const loadOrder = async (orderId: string) => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞:', orderId);
      const response = await fetch(`/api/admin/orders/${orderId}`);
      console.log('üì° –û—Ç–≤–µ—Ç API:', response.status, response.statusText);
      
      if (response.ok) {
        const data = await response.json();
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—É—á–µ–Ω—ã:', data);
        setOrder(data.order);
        setNewStatus(data.order.status);
        setAdminComment(data.order.adminComment || '');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        if (data.order.comments) {
          setComments(data.order.comments);
        }
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status, response.statusText);
        const errorData = await response.text();
        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
        router.push('/admin/dashboard');
      }
    } catch (error) {
      console.error('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞:', error);
      router.push('/admin/dashboard');
    } finally {
      setIsLoading(false);
    }
  };

  const updateOrderStatus = async () => {
    if (!order) return;

    setIsUpdating(true);
    try {
      const response = await fetch(`/api/admin/orders/${order.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          status: newStatus,
          adminComment: adminComment.trim() || undefined
        }),
      });

      if (response.ok) {
        await loadOrder(order.id);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  const logout = async () => {
    await fetch('/api/admin/auth', { method: 'DELETE' });
    router.push('/admin');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const addComment = async () => {
    if (!order || !newComment.trim()) return;

    setIsAddingComment(true);
    try {
      const response = await fetch(`/api/admin/orders/${order.id}/comments`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          content: newComment.trim()
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setComments(prev => [...prev, data.comment]);
        setNewComment('');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    } finally {
      setIsAddingComment(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatPrice = (price: number | string) => {
    const numPrice = typeof price === 'string' ? parseFloat(price) : price;
    if (isNaN(numPrice)) {
      return '0 ‚ÇΩ';
    }
    return `${numPrice.toLocaleString('ru-RU')} ‚ÇΩ`;
  };

  if (!isMounted || isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#303030] mx-auto"></div>
          <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞...</p>
        </div>
      </div>
    );
  }

  if (!order) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* –®–∞–ø–∫–∞ */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.push('/admin/dashboard')}
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors duration-200"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                <span className="text-sm">–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º</span>
              </button>
              <h1 className="text-2xl font-bold text-gray-900">
                –ó–∞–∫–∞–∑ #{order.id.slice(-8)}
              </h1>
            </div>
            <button
              onClick={logout}
              className="text-gray-600 hover:text-gray-900 text-sm"
            >
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="lg:col-span-2 space-y-6">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ</h2>
              <dl className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                  <dt className="text-sm font-medium text-gray-500">–ò–º—è</dt>
                  <dd className="mt-1 text-sm text-gray-900">{order.customerName}</dd>
                </div>
                {order.customerEmail && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Email</dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      <a href={`mailto:${order.customerEmail}`} className="text-blue-600 hover:text-blue-800">
                        {order.customerEmail}
                      </a>
                    </dd>
                  </div>
                )}
                {order.customerPhone && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">–¢–µ–ª–µ—Ñ–æ–Ω</dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      <a href={`tel:${order.customerPhone}`} className="text-blue-600 hover:text-blue-800">
                        {order.customerPhone}
                      </a>
                    </dd>
                  </div>
                )}
                {order.customerCompany && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">–ö–æ–º–ø–∞–Ω–∏—è</dt>
                    <dd className="mt-1 text-sm text-gray-900">{order.customerCompany}</dd>
                  </div>
                )}
                {order.user && (
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Telegram</dt>
                    <dd className="mt-1 text-sm text-gray-900">
                      @{order.user.username} ({order.user.firstName} {order.user.lastName})
                    </dd>
                  </div>
                )}
              </dl>
            </div>

            {/* –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞</h2>
              <div className="space-y-4">
                {Array.isArray(order.items) ? order.items.map((item, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <div className="flex items-center gap-3">
                        {item.image && (
                          <img 
                            src={item.image} 
                            alt={item.productName || item.name || '–¢–æ–≤–∞—Ä'} 
                            className="w-12 h-12 object-cover rounded"
                          />
                        )}
                        <h3 className="font-medium text-gray-900">
                          {item.productName || item.name || `–¢–æ–≤–∞—Ä ${index + 1}`}
                        </h3>
                      </div>
                      <span className="text-sm text-gray-500">
                        {item.totalPrice ? (
                          `${formatPrice(item.totalPrice)} (${item.quantity || 1} —à—Ç.)`
                        ) : (
                          `${formatPrice(item.pricePerUnit || item.basePrice || item.price || 0)} √ó ${item.quantity || 1} = ${formatPrice((item.pricePerUnit || item.basePrice || item.price || 0) * (item.quantity || 1))}`
                        )}
                      </span>
                    </div>
                    
                    {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ optionsDetails */}
                    {item.optionsDetails && item.optionsDetails.length > 0 && (
                      <div className="mt-2">
                        <p className="text-sm font-medium text-gray-700 mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:</p>
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                          {item.optionsDetails.map((option, optionIndex) => (
                            <div key={optionIndex} className="flex justify-between items-center bg-gray-50 px-2 py-1 rounded text-sm">
                              <span className="text-gray-700">{option.name}</span>
                              <span className="text-gray-900 font-medium">
                                {option.price > 0 ? `+${formatPrice(option.price)}` : '–ë–∞–∑–æ–≤–∞—è'}
                              </span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ selectedOptions (–µ—Å–ª–∏ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç optionsDetails) */}
                    {!item.optionsDetails && item.selectedOptions && typeof item.selectedOptions === 'object' && Object.keys(item.selectedOptions).length > 0 && (
                      <div className="mt-2">
                        <p className="text-sm font-medium text-gray-700 mb-1">–í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:</p>
                        <ul className="text-sm text-gray-600 space-y-1">
                          {Object.entries(item.selectedOptions).map(([key, value]) => (
                            <li key={key} className="flex justify-between">
                              <span className="capitalize">{key}:</span>
                              <span>{String(value)}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {/* –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–∏–∑–∞–π–Ω—É */}
                    {item.designComment && (
                      <div className="mt-2">
                        <p className="text-sm font-medium text-gray-700">–ü–æ–∂–µ–ª–∞–Ω–∏—è –∫ –¥–∏–∑–∞–π–Ω—É:</p>
                        <p className="text-sm text-gray-600 mt-1">{item.designComment}</p>
                      </div>
                    )}

                    {/* –§–∞–π–ª—ã –¥–∏–∑–∞–π–Ω–∞ */}
                    {item.designFiles && item.designFiles.length > 0 && (
                      <div className="mt-2">
                        <p className="text-sm font-medium text-gray-700">–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</p>
                        <ul className="text-sm text-blue-600 mt-1 space-y-1">
                          {item.designFiles.map((file, fileIndex) => (
                            <li key={fileIndex}>
                              <a href={file} target="_blank" rel="noopener noreferrer" className="hover:text-blue-800">
                                üìé –§–∞–π–ª {fileIndex + 1}
                              </a>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                )) : (
                  <p className="text-gray-500 text-center py-4">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                )}
              </div>
              
              <div className="mt-6 pt-4 border-t border-gray-200">
                <div className="flex justify-between items-center">
                  <span className="text-lg font-medium text-gray-900">–ò—Ç–æ–≥–æ:</span>
                  <span className="text-xl font-bold text-gray-900">{formatPrice(order.totalAmount)}</span>
                </div>
              </div>
            </div>
          </div>

          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
          <div className="space-y-6">
            {/* –°—Ç–∞—Ç—É—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º</h2>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                  </label>
                  <span className={`inline-flex px-3 py-1 text-sm font-semibold rounded-full ${statusColors[order.status as keyof typeof statusColors]}`}>
                    {statusLabels[order.status as keyof typeof statusLabels]}
                  </span>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                  </label>
                  <select
                    value={newStatus}
                    onChange={(e) => setNewStatus(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-[#303030] focus:border-[#303030]"
                  >
                    {Object.entries(statusLabels).map(([key, label]) => (
                      <option key={key} value={key}>{label}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                  </label>
                  <textarea
                    value={adminComment}
                    onChange={(e) => setAdminComment(e.target.value)}
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-[#303030] focus:border-[#303030]"
                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞..."
                  />
                </div>

                <button
                  onClick={updateOrderStatus}
                  disabled={isUpdating || (newStatus === order.status && adminComment === (order.adminComment || ''))}
                  className="w-full bg-[#303030] text-white px-4 py-2 rounded-md hover:bg-[#404040] disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isUpdating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                </button>
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ</h2>
              <dl className="space-y-3">
                <div>
                  <dt className="text-sm font-medium text-gray-500">ID –∑–∞–∫–∞–∑–∞</dt>
                  <dd className="mt-1 text-sm text-gray-900 font-mono">{order.id}</dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</dt>
                  <dd className="mt-1 text-sm text-gray-900">{formatDate(order.createdAt)}</dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</dt>
                  <dd className="mt-1 text-sm text-gray-900">{formatDate(order.updatedAt)}</dd>
                </div>
                <div>
                  <dt className="text-sm font-medium text-gray-500">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤</dt>
                  <dd className="mt-1 text-sm text-gray-900">{order.items.length} –ø–æ–∑–∏—Ü{order.items.length === 1 ? '–∏—è' : '–∏–∏'}</dd>
                </div>
              </dl>
            </div>

            {/* –¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π */}
            {order.adminComment && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <h3 className="text-sm font-medium text-yellow-800 mb-2">–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</h3>
                <p className="text-sm text-yellow-700">{order.adminComment}</p>
              </div>
            )}

            {/* –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">üí¨ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ –∑–∞–∫–∞–∑—É</h3>
              
              {/* –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ */}
              <div className="space-y-4 mb-6">
                {comments.length === 0 ? (
                  <p className="text-gray-500 text-sm">–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</p>
                ) : (
                  comments.map((comment) => (
                    <div key={comment.id} className={`p-3 rounded-lg ${
                      comment.isAdmin 
                        ? 'bg-blue-50 border border-blue-200 ml-8' 
                        : 'bg-gray-50 border border-gray-200 mr-8'
                    }`}>
                      <div className="flex justify-between items-start mb-2">
                        <span className="text-sm font-medium text-gray-900">
                          {comment.isAdmin ? `üë®‚Äçüíº ${comment.authorName || '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}` : 'üë§ –ö–ª–∏–µ–Ω—Ç'}
                        </span>
                        <span className="text-xs text-gray-500">
                          {formatDate(comment.createdAt)}
                        </span>
                      </div>
                      <p className="text-sm text-gray-700 whitespace-pre-wrap">{comment.content}</p>
                    </div>
                  ))
                )}
              </div>

              {/* –§–æ—Ä–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */}
              <div className="border-t border-gray-200 pt-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                </label>
                <textarea
                  value={newComment}
                  onChange={(e) => setNewComment(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                  rows={3}
                />
                <div className="mt-3 flex justify-end">
                  <button
                    onClick={addComment}
                    disabled={!newComment.trim() || isAddingComment}
                    className="px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:bg-gray-300 disabled:cursor-not-allowed"
                  >
                    {isAddingComment ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
