'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
function WelcomePageContent() {
  const router = useRouter();
  const [isReturningUser, setIsReturningUser] = useState(false);
  const [showWelcome, setShowWelcome] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [nextStep, setNextStep] = useState<number | null>(null);
  const [selectedService, setSelectedService] = useState<string | null>(null);
  const [selectedDesignType, setSelectedDesignType] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const [selectedProducts, setSelectedProducts] = useState<string[]>([]);
  const [productQuantities, setProductQuantities] = useState<{[key: string]: number}>({});
  const [hasBrandbook, setHasBrandbook] = useState<string | null>(null);
  const [orderNumber, setOrderNumber] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [isAnimating, setIsAnimating] = useState(false);
  const [animationDirection, setAnimationDirection] = useState<'forward' | 'backward'>('forward');
  const [animationPhase, setAnimationPhase] = useState<'exit' | 'enter'>('exit');

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "TL")
  const availableProducts = [
    { id: 't-shirt', name: '–§—É—Ç–±–æ–ª–∫–∞', category: 'clothing' },
    { id: 'longsleeve', name: '–õ–æ–Ω–≥—Å–ª–∏–≤', category: 'clothing' },
    { id: 'sweatshirt', name: '–°–≤–∏—Ç—à–æ—Ç', category: 'clothing' },
    { id: 'hoodies', name: '–•—É–¥–∏', category: 'clothing' },
    { id: 'halfzip', name: '–•–∞–ª—Ñ–∑–∏–ø', category: 'clothing' },
    { id: 'zip-hoodie', name: '–ó–∏–ø —Ö—É–¥–∏', category: 'clothing' },
    { id: 'pants', name: '–®—Ç–∞–Ω—ã', category: 'clothing' },
    { id: 'jeans', name: '–î–∂–∏–Ω—Å—ã', category: 'clothing' },
    { id: 'shorts', name: '–®–æ—Ä—Ç—ã', category: 'clothing' },
    { id: 'shopper', name: '–®–æ–ø–ø–µ—Ä', category: 'accessories' },
  ];

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã –∫–≤–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
  const getQuizSteps = () => {
    if (selectedService === 'production' && currentStep >= 8) {
      return [
        { id: 1, title: '–¢–æ–≤–∞—Ä—ã', description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' },
        { id: 2, title: '–ì–æ—Ç–æ–≤–æ', description: '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' }
      ];
    }
    return [
      { id: 1, title: '–£—Å–ª—É–≥–∞', description: '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É' },
      { id: 2, title: '–î–µ—Ç–∞–ª–∏', description: '–£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞' },
      { id: 3, title: '–¢–æ–≤–∞—Ä—ã', description: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' },
      { id: 4, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' },
      { id: 5, title: '–ì–æ—Ç–æ–≤–æ', description: '–ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞' }
    ];
  };

  const quizSteps = getQuizSteps();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
  const getCurrentStepTitle = () => {
    const stepNumber = getCurrentStepNumber();
    return quizSteps[stepNumber - 1]?.description || '';
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
  const getCurrentStepNumber = () => {
    if (currentStep === 1) return 1; // –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
    if (currentStep === 2 || currentStep === 3) return 2; // –î–µ—Ç–∞–ª–∏ (—Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞ –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª)
    if (currentStep === 4) return 3; // –¢–æ–≤–∞—Ä—ã —Å —Ç–µ–≥–∞–º–∏ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞
    if (currentStep === 5) return 4; // –ë—Ä–µ–Ω–¥–±—É–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    if (currentStep === 6 || currentStep === 7) return 5; // –ì–æ—Ç–æ–≤–æ (–¥–∏–∑–∞–π–Ω)
    if (currentStep === 8) return 1; // –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (—ç—Ç–∞–ø 1 –∏–∑ 2)
    if (currentStep === 9 || currentStep === 10) return 2; // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–≥–æ—Ç–æ–≤–æ (—ç—Ç–∞–ø 2 –∏–∑ 2)
    return 1;
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const ProgressSteps = () => {
    const currentStepNumber = getCurrentStepNumber();
    
    return (
      <div className="w-full">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —à–∞–≥–∞ - –≤—ã—à–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ */}
        <div className="text-center mb-2 w-full">
          <h2 className="text-lg font-semibold text-gray-900">
            {getCurrentStepTitle()}
          </h2>
          <div className="text-xs text-gray-500 mt-1">
            –®–∞–≥ {getCurrentStepNumber()} –∏–∑ {quizSteps.length}
          </div>
        </div>

        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ª–æ—Å–∞ —Å —Ç–æ—á–∫–∞–º–∏ */}
        <div className="flex items-center justify-center w-full">
          <div className="flex items-center">
            {quizSteps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                {/* –¢–æ—á–∫–∞ —ç—Ç–∞–ø–∞ */}
                <div className={`
                  relative flex items-center justify-center w-6 h-6 rounded-full transition-all duration-300
                  ${currentStepNumber >= step.id 
                    ? 'bg-[#303030] text-white' 
                    : 'bg-gray-300 text-gray-500'
                  }
                `}>
                  {currentStepNumber > step.id ? (
                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={3} d="M5 13l4 4L19 7" />
                    </svg>
                  ) : (
                    <div className="w-2 h-2 bg-current rounded-full"></div>
                  )}
                </div>
                
                {/* –õ–∏–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ */}
                {index < quizSteps.length - 1 && (
                  <div className={`
                    w-8 h-0.5 mx-2 transition-all duration-300
                    ${currentStepNumber > step.id ? 'bg-[#303030]' : 'bg-gray-300'}
                  `} />
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    );
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
  const toggleProduct = (productId: string) => {
    if (!selectedProducts.includes(productId)) {
      setSelectedProducts([...selectedProducts, productId]);
      setProductQuantities({ ...productQuantities, [productId]: 10 });
    }
    // –ù–µ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –ø—Ä–∏ –∫–ª–∏–∫–µ - —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º
  };

  const updateQuantity = (productId: string, quantity: number) => {
    if (quantity >= 10) {
      setProductQuantities({ ...productQuantities, [productId]: quantity });
    }
  };

  const increaseQuantity = (productId: string) => {
    const currentQuantity = productQuantities[productId] || 10;
    setProductQuantities({ ...productQuantities, [productId]: currentQuantity + 1 });
  };

  const decreaseQuantity = (productId: string) => {
    const currentQuantity = productQuantities[productId] || 10;
    if (currentQuantity > 10) {
      setProductQuantities({ ...productQuantities, [productId]: currentQuantity - 1 });
    } else if (currentQuantity === 10) {
      // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ (10), —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –≤—ã–±–æ—Ä–∞
      setSelectedProducts(selectedProducts.filter(id => id !== productId));
      const newQuantities = { ...productQuantities };
      delete newQuantities[productId];
      setProductQuantities(newQuantities);
    }
  };

  const animatedStepChange = (newStep: number) => {
    const direction = newStep > currentStep ? 'forward' : 'backward';
    setAnimationDirection(direction);
    setNextStep(newStep);
    setIsAnimating(true);
    setAnimationPhase('exit');
    
    // –§–∞–∑–∞ 1: –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    setTimeout(() => {
      setCurrentStep(newStep);
      setNextStep(null);
      setAnimationPhase('enter');
      
      // –§–∞–∑–∞ 2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –≤—Ö–æ–¥–∞
      setTimeout(() => {
        setIsAnimating(false);
        setAnimationPhase('exit');
      }, 150);
    }, 300);
  };

  const getProductsByCategory = (category: string) => {
    if (category === 'everything') return availableProducts;
    return availableProducts.filter(product => product.category === category);
  };

  const handleProductsSelection = () => {
    if (selectedProducts.length > 0) {
      animatedStepChange(5); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –±—Ä–µ–Ω–¥–±—É–∫–µ
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ - —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ!
  const generateOrderNumber = () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
    if (typeof window === 'undefined') {
      return 'TL-000000000'; // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    }
    
    const timestamp = Date.now();
    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
    return `TL-${timestamp.toString().slice(-6)}${random}`;
  };

  useEffect(() => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HomePage');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp');
      try {
        window.Telegram.WebApp.ready();
        window.Telegram.WebApp.expand();
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤ –≤–µ—Ä—Å–∏–∏ 6.0 —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º:
        // - setBackgroundColor
        // - setHeaderColor
        // - enableClosingConfirmation
        // - disableSwipe
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ)
    if (typeof window !== 'undefined') {
      const urlParams = new URLSearchParams(window.location.search);
      const welcomeParam = urlParams.get('welcome');
      const forceWelcome = welcomeParam === 'true';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
      const hasVisited = localStorage.getItem('tl_has_visited');
      
      if (forceWelcome) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä welcome=true, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setShowWelcome(true);
        setIsReturningUser(false);
      } else if (hasVisited) {
        setIsReturningUser(true);
        // –î–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
        setTimeout(() => {
          router.push('/catalog');
        }, 500);
      } else {
        // –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setShowWelcome(true);
      }
    }
  }, [router]);

  const handleServiceSelect = (service: string) => {
    setSelectedService(service);
    
    if (service === 'production') {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
      animatedStepChange(8); // –ù–æ–≤—ã–π —ç—Ç–∞–ø –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    } else if (service === 'design') {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —à–∞–≥—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–∏–∑–∞–π–Ω–∞
      animatedStepChange(2);
    } else if (service === 'full-cycle') {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ
      animatedStepChange(3);
    }
  };

  const handleDesignSelect = (designType: string) => {
    setSelectedDesignType(designType);
    animatedStepChange(4); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
  };

  const handleCategorySelect = (category: string) => {
    setSelectedCategory(category);
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤
    setSelectedProducts([]);
    setProductQuantities({});
    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ, –Ω–æ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
  };

  const handleBrandbookSelect = (answer: string) => {
    setHasBrandbook(answer);
    animatedStepChange(6); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  };

  const handleDesignFinish = async () => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    setSubmitError(null);
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      const newOrderNumber = generateOrderNumber();
      setOrderNumber(newOrderNumber);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      localStorage.setItem('tl_has_visited', 'true');
      localStorage.setItem('tl_selected_service', 'design');
      localStorage.setItem('tl_design_type', selectedDesignType || '');
      localStorage.setItem('tl_design_category', selectedCategory || '');
      localStorage.setItem('tl_has_brandbook', hasBrandbook || '');
      localStorage.setItem('tl_order_number', newOrderNumber);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç
      const orderData = {
        orderNumber: newOrderNumber,
        service: 'design',
        designType: selectedDesignType,
        category: selectedCategory,
        brandbook: hasBrandbook,
        timestamp: new Date().toISOString(),
        source: 'webapp'
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç-–±–æ—Ç
      await sendOrderToBot(orderData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
      animatedStepChange(7);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
      setSubmitError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleProductionFinish = async () => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    setSubmitError(null);
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
      const newOrderNumber = generateOrderNumber();
      setOrderNumber(newOrderNumber);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      localStorage.setItem('tl_has_visited', 'true');
      localStorage.setItem('tl_selected_service', 'production');
      localStorage.setItem('tl_order_number', newOrderNumber);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç
      const orderData = {
        orderNumber: newOrderNumber,
        service: 'production',
        products: selectedProducts,
        quantities: productQuantities,
        timestamp: new Date().toISOString(),
        source: 'webapp'
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —á–∞—Ç-–±–æ—Ç
      await sendProductionOrderToBot(orderData);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
      animatedStepChange(10);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
      setSubmitError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram –±–æ—Ç
  const sendOrderToBot = async (orderData: any) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram WebApp
      let userInfo = null;
      if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user) {
        userInfo = window.Telegram.WebApp.initDataUnsafe.user;
      }

      const payload = {
        ...orderData,
        user: userInfo
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ API —Ä–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
      const response = await fetch('/api/design-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }

      const result = await response.json();
      console.log('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–æ—Ç:', result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ Telegram –±–æ—Ç
  const sendProductionOrderToBot = async (orderData: any) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram WebApp
      let userInfo = null;
      if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user) {
        userInfo = window.Telegram.WebApp.initDataUnsafe.user;
      }

      const payload = {
        ...orderData,
        user: userInfo
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ API —Ä–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
      const response = await fetch('/api/production-order', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      }

      const result = await response.json();
      console.log('–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–æ—Ç:', result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
  };

  const handleFullCycleSelect = () => {
    localStorage.setItem('tl_has_visited', 'true');
    localStorage.setItem('tl_selected_service', 'full-cycle');
    router.push('/catalog');
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ welcome)
  if (isReturningUser) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-800 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...</p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç –∏–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä welcome=true
  if (!showWelcome) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 quiz-container">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-sm border-b border-gray-200">
        <div className="max-w-md mx-auto px-4 py-4">
          <div className="flex items-center justify-center">
            <Image
              src="/TLlogo.svg"
              alt="Total Lookas"
              width={120}
              height={40}
              className="h-10 w-auto"
            />
          </div>
        </div>
      </header>

      {/* Survey Content */}
      <div className="max-w-md mx-auto px-4 pt-10 pb-6 overflow-x-hidden">
        <div className={`
          transition-all duration-500 ease-in-out overflow-x-hidden
          ${!isAnimating 
            ? 'fade-active'
            : animationPhase === 'exit'
              ? 'fade-exit'
              : 'fade-enter'
          }
        `}>
          {/* Step 1: Service Selection */}
          {currentStep === 1 && (
          <div className="text-center mb-8 pb-2.5">
            <h1 className="text-3xl font-bold text-gray-900 mb-3">
              –ô–æ—É! –ü—Ä–∏–≤–µ—Ç! üëã
            </h1>
            <p className="text-gray-600 text-lg mb-2">
              –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –∫—Ä—É—Ç–æ–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
            </p>
            <p className="text-gray-500 text-base mb-8">
              –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—É–∂–Ω–∞ ‚Üì
            </p>

            <div className="space-y-4">
              {/* –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –º–µ—Ä—á–∞ */}
              <button
                onClick={() => handleServiceSelect('production')}
                className="w-full p-6 bg-white rounded-lg border border-gray-200 hover:border-gray-400 hover:shadow-lg transition-all duration-200 text-left"
              >
                <div className="flex items-start gap-4">
                  <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Image
                      src="/all_sheet.svg"
                      alt="Production"
                      width={24}
                      height={24}
                      className="w-6 h-6 text-gray-700"
                    />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º–µ—Ä—á</h3>
                    <p className="text-sm text-gray-600">
                      –£ –º–µ–Ω—è –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
                    </p>
                  </div>
                </div>
              </button>

              {/* –î–∏–∑–∞–π–Ω –º–µ—Ä—á–∞ */}
              <button
                onClick={() => handleServiceSelect('design')}
                className="w-full p-6 bg-white rounded-lg border border-gray-200 hover:border-gray-400 hover:shadow-lg transition-all duration-200 text-left"
              >
                <div className="flex items-start gap-4">
                  <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Image
                      src="/ph_t-shirt.svg"
                      alt="Design"
                      width={24}
                      height={24}
                      className="w-6 h-6 text-gray-700"
                    />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">–ù—É–∂–µ–Ω –¥–∏–∑–∞–π–Ω –º–µ—Ä—á–∞</h3>
                    <p className="text-sm text-gray-600">
                      –°–æ–∑–¥–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
                    </p>
                  </div>
                </div>
              </button>
            </div>

            {/* –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
            <div className="flex items-center gap-4 my-8">
              <div className="flex-1 h-px bg-gray-200"></div>
              <span className="text-sm text-gray-500">–∏–ª–∏</span>
              <div className="flex-1 h-px bg-gray-200"></div>
            </div>

            {/* –ü—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ */}
            <button
              onClick={() => {
                localStorage.setItem('tl_has_visited', 'true');
                // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö
                localStorage.removeItem('tl_selected_service');
                localStorage.removeItem('tl_design_type');
                localStorage.removeItem('tl_category');
                localStorage.removeItem('tl_has_brandbook');
                router.push('/catalog');
              }}
              className="w-full p-4 bg-gray-50 rounded-lg border border-gray-200 hover:border-gray-300 hover:bg-gray-100 transition-all duration-200 text-left"
            >
              <div className="flex items-center gap-4">
                <div className="w-10 h-10 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
                  <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                </div>
                <div>
                  <h3 className="font-medium text-gray-700 mb-1">–°–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥</h3>
                  <p className="text-sm text-gray-500">
                    –Ø —Å–∞–º –≤—ã–±–µ—Ä—É —Ç–æ–≤–∞—Ä—ã –∏ –æ—Ñ–æ—Ä–º–ª—é –∑–∞–∫–∞–∑
                  </p>
                </div>
              </div>
            </button>
          </div>
        )}

        {/* Step 2: Design Type Selection */}
        {currentStep === 2 && (
          <div className="text-center mb-8 pb-2.5">
            <button
              onClick={() => animatedStepChange(1)}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>

            {/* Progress Steps */}
            <div className="w-full flex justify-center">
              <ProgressSteps />
            </div>

            <div className="space-y-4">
              {/* –î–∏–∑–∞–π–Ω –æ–¥–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è */}
              <button
                onClick={() => handleDesignSelect('single-item')}
                className="w-full p-6 bg-white rounded-lg border border-gray-200 hover:border-gray-400 hover:shadow-lg transition-all duration-200 text-left"
              >
                <div className="flex items-start gap-4">
                  <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Image
                      src="/ph_t-shirt.svg"
                      alt="T-shirt icon"
                      width={24}
                      height={24}
                      className="w-6 h-6 text-gray-700"
                    />
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">–î–∏–∑–∞–π–Ω –æ–¥–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è</h3>
                    <p className="text-sm text-gray-600 mb-2">
                      –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Ñ—É—Ç–±–æ–ª–∫–∞, —Ö—É–¥–∏, —à–æ–ø–ø–µ—Ä –∏ —Ç.–¥.)
                    </p>
                    {/* <p className="text-lg font-bold text-gray-900">–æ—Ç 15 000 ‚ÇΩ</p> */}
                  </div>
                </div>
              </button>

              {/* –î–∏–∑–∞–π–Ω –¥—Ä–æ–ø–∞/–∫–æ–ª–ª–µ–∫—Ü–∏–∏ */}
              <button
                onClick={() => handleDesignSelect('collection')}
                className="w-full p-6 bg-white rounded-lg border border-gray-200 hover:border-gray-400 hover:shadow-lg transition-all duration-200 text-left"
              >
                <div className="flex items-start gap-4">
                  <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <svg className="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">–î–∏–∑–∞–π–Ω –¥—Ä–æ–ø–∞/–∫–æ–ª–ª–µ–∫—Ü–∏–∏</h3>
                    <p className="text-sm text-gray-600 mb-2">
                      –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ
                    </p>
                    {/* <p className="text-lg font-bold text-gray-900">–æ—Ç 50 000 ‚ÇΩ</p> */}
                  </div>
                </div>
              </button>
            </div>
          </div>
        )}

        {/* Step 3: Full Cycle Info */}
        {currentStep === 3 && (
          <div className="text-center mb-8 pb-2.5">
            <button
              onClick={() => animatedStepChange(1)}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>

            <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-10 h-10 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
              </svg>
            </div>

            {/* Progress Steps */}
            <div className="w-full flex justify-center">
              <ProgressSteps />
            </div>
            
            <p className="text-gray-600 text-lg leading-relaxed mb-8">
              –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä—á–∞ –æ—Ç –∏–¥–µ–∏ –¥–æ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.<br/>
              –ú—ã —Å–æ–∑–¥–∞–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞.
            </p>

            <div className="bg-white rounded-lg p-6 border border-gray-200 mb-8">
              <h3 className="font-semibold text-gray-900 mb-4">–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç:</h3>
              <div className="space-y-3 text-left">
                <div className="flex items-start gap-3">
                  <svg className="w-5 h-5 text-gray-700 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                  <span className="text-sm text-gray-600">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∞</span>
                </div>
                <div className="flex items-start gap-3">
                  <svg className="w-5 h-5 text-gray-700 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                  <span className="text-sm text-gray-600">–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞</span>
                </div>
                <div className="flex items-start gap-3">
                  <svg className="w-5 h-5 text-gray-700 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                  <span className="text-sm text-gray-600">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–µ—á–∞—Ç–∏</span>
                </div>
                <div className="flex items-start gap-3">
                  <svg className="w-5 h-5 text-gray-700 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                  <span className="text-sm text-gray-600">–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞</span>
                </div>
                <div className="flex items-start gap-3">
                  <svg className="w-5 h-5 text-gray-700 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                  <span className="text-sm text-gray-600">–£–ø–∞–∫–æ–≤–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞</span>
                </div>
              </div>
            </div>

            <button
              onClick={handleFullCycleSelect}
              className="w-full bg-gray-800 text-white py-4 px-6 rounded-lg font-semibold text-lg hover:bg-gray-900 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200"
            >
              –ù–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
            </button>
            
            <p className="text-xs text-gray-500 mt-4">
              –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            </p>
          </div>
        )}

        {/* Step 4: Product Selection with Tags */}
        {currentStep === 4 && (
          <div className="text-center mb-8 pb-2.5">
            <button
              onClick={() => animatedStepChange(2)}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>

            {/* Progress Steps */}
            <div className="w-full flex justify-center">
              <ProgressSteps />
            </div>

            {/* Clothing Products */}
            <div className="mb-8">
              <h3 className="text-lg font-semibold text-gray-800 mb-4 text-left">–û–¥–µ–∂–¥–∞</h3>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                {getProductsByCategory('clothing').map(product => (
                  <div key={product.id} className="text-center">
                    <button
                      onClick={() => toggleProduct(product.name)}
                      className={`w-full h-20 p-3 rounded-lg border-2 transition-all duration-200 text-sm font-medium flex flex-col items-center justify-center ${
                        selectedProducts.includes(product.name)
                          ? 'border-[#303030] bg-[#303030] text-white'
                          : 'border-gray-200 bg-white text-gray-700 hover:border-gray-400'
                      }`}
                    >
                      <div className="font-medium">{product.name}</div>
                      {selectedProducts.includes(product.name) && (
                        <div className="mt-2 flex items-center justify-center gap-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              decreaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            ‚àí
                          </button>
                          <span className="text-sm font-medium min-w-[40px]">
                            {productQuantities[product.name] || 10} —à—Ç.
                          </span>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              increaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            +
                          </button>
                        </div>
                      )}
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Accessories Products */}
            <div className="mb-8">
              <h3 className="text-lg font-semibold text-gray-800 mb-4 text-left">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</h3>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                {getProductsByCategory('accessories').map(product => (
                  <div key={product.id} className="text-center">
                    <button
                      onClick={() => toggleProduct(product.name)}
                      className={`w-full h-20 p-3 rounded-lg border-2 transition-all duration-200 text-sm font-medium flex flex-col items-center justify-center ${
                        selectedProducts.includes(product.name)
                          ? 'border-[#303030] bg-[#303030] text-white'
                          : 'border-gray-200 bg-white text-gray-700 hover:border-gray-400'
                      }`}
                    >
                      <div className="font-medium">{product.name}</div>
                      {selectedProducts.includes(product.name) && (
                        <div className="mt-2 flex items-center justify-center gap-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              decreaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            ‚àí
                          </button>
                          <span className="text-sm font-medium min-w-[40px]">
                            {productQuantities[product.name] || 10} —à—Ç.
                          </span>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              increaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            +
                          </button>
                        </div>
                      )}
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Continue Button */}
            {selectedProducts.length > 0 && (
              <button
                onClick={() => animatedStepChange(5)}
                className="w-full bg-[#303030] text-white py-4 px-6 rounded-lg text-lg font-medium hover:bg-gray-800 transition-colors"
              >
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
              </button>
            )}
          </div>
        )}

        {/* Step 5: Brandbook Question */}
        {currentStep === 5 && (
          <div className="text-center mb-8 pb-2.5">
            <button
              onClick={() => animatedStepChange(4)}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>

            {/* Progress Steps */}
            <div className="w-full flex justify-center">
              <ProgressSteps />
            </div>

            <div className="space-y-4">
              <button
                onClick={() => handleBrandbookSelect('partial')}
                className="w-full p-6 bg-white rounded-lg border border-gray-200 hover:border-gray-400 hover:shadow-lg transition-all duration-200 text-left"
              >
                <div className="flex items-start gap-4">
                  <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <svg className="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">–ß–∞—Å—Ç–∏—á–Ω–æ</h3>
                    <p className="text-sm text-gray-600">
                      –ï—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø –∏ –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞
                    </p>
                  </div>
                </div>
              </button>

              <button
                onClick={() => handleBrandbookSelect('no')}
                className="w-full p-6 bg-white rounded-lg border border-gray-200 hover:border-gray-400 hover:shadow-lg transition-all duration-200 text-left"
              >
                <div className="flex items-start gap-4">
                  <div className="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <svg className="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="font-semibold text-gray-900 mb-2">–ù–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è</h3>
                    <p className="text-sm text-gray-600">
                      –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å —Å –Ω—É–ª—è
                    </p>
                  </div>
                </div>
              </button>
            </div>
          </div>
        )}

        {/* Step 6: Design Brief Summary */}
        {currentStep === 6 && (
          <div className="text-center mb-8 pb-2.5">
            <button
              onClick={() => animatedStepChange(5)}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>

            <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-10 h-10 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
            </div>

            <p className="text-gray-600 text-lg leading-relaxed mb-8">
              –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–∞
            </p>

            <div className="bg-white rounded-lg p-6 border border-gray-200 mb-8 text-left">
              <h3 className="font-semibold text-gray-900 mb-4">–í–∞—à –∑–∞–∫–∞–∑:</h3>
              <div className="space-y-3">
                <div>
                  <p className="text-sm text-gray-600">
                    <span className="font-medium">–¢–∏–ø –¥–∏–∑–∞–π–Ω–∞:</span>{' '}
                    {selectedDesignType === 'single-item' ? '–î–∏–∑–∞–π–Ω –æ–¥–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è (–æ—Ç 15,000 ‚ÇΩ)' : '–î–∏–∑–∞–π–Ω –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–æ—Ç 50,000 ‚ÇΩ)'}
                  </p>
                </div>
                
                {selectedProducts.length > 0 && (
                  <div>
                    <p className="text-sm text-gray-600 font-medium mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</p>
                    <div className="pl-4 space-y-1">
                      {selectedProducts.map((productName) => (
                        <p key={productName} className="text-sm text-gray-600">
                          ‚Ä¢ {productName} ‚Äî {productQuantities[productName] || 10} —à—Ç.
                        </p>
                      ))}
                    </div>
                  </div>
                )}
                
                <div>
                  <p className="text-sm text-gray-600">
                    <span className="font-medium">–ë—Ä–µ–Ω–¥–±—É–∫:</span>{' '}
                    {hasBrandbook === 'yes' ? '–ï—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π' : 
                     hasBrandbook === 'partial' ? '–ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤' : '–°–æ–∑–¥–∞—ë–º —Å –Ω—É–ª—è'}
                  </p>
                </div>
              </div>
            </div>

            {submitError && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <div className="flex items-start gap-3">
                  <svg className="w-5 h-5 text-red-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <p className="text-sm text-red-800">{submitError}</p>
                </div>
              </div>
            )}

            <button
              onClick={handleDesignFinish}
              disabled={isSubmitting}
              className="w-full bg-gray-800 text-white py-4 px-6 rounded-lg font-semibold text-lg hover:bg-gray-900 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-all duration-200 flex items-center justify-center gap-2"
            >
              {isSubmitting ? (
                <>
                  <svg className="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...
                </>
              ) : (
                '–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
              )}
            </button>
            
            <p className="text-xs text-gray-500 mt-4">
              –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
            </p>
          </div>
        )}

        {/* Step 7: Final Success */}
        {currentStep === 7 && (
          <div className="text-center mb-8 pb-2.5">
            <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-10 h-10 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>

            <p className="text-gray-600 text-lg leading-relaxed mb-6">
              –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ.
            </p>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
            <div className="bg-gray-50 rounded-lg p-6 border border-gray-200 mb-6">
              <div className="flex items-center justify-center gap-3 mb-4">
                <svg className="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                <h3 className="font-semibold text-gray-900">–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç-–±–æ—Ç</h3>
              </div>
              
              {orderNumber && (
                <div className="bg-white rounded-lg p-4 mb-4">
                  <p className="text-sm text-gray-600 mb-1">–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</p>
                  <p className="text-lg font-mono font-bold text-gray-900">{orderNumber}</p>
                </div>
              )}
              
              <div className="text-left space-y-2">
                <p className="text-sm text-gray-600">
                  <span className="font-medium">–¢–∏–ø –¥–∏–∑–∞–π–Ω–∞:</span>{' '}
                  {selectedDesignType === 'single-item' ? '–î–∏–∑–∞–π–Ω –æ–¥–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è' : '–î–∏–∑–∞–π–Ω –∫–æ–ª–ª–µ–∫—Ü–∏–∏'}
                </p>
                <p className="text-sm text-gray-600">
                  <span className="font-medium">–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</span>{' '}
                  {selectedCategory === 'clothing' ? '–û–¥–µ–∂–¥–∞' : 
                   selectedCategory === 'accessories' ? '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã' : '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
                </p>
                <p className="text-sm text-gray-600">
                  <span className="font-medium">–ë—Ä–µ–Ω–¥–±—É–∫:</span>{' '}
                  {hasBrandbook === 'yes' ? '–ï—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π' : 
                   hasBrandbook === 'partial' ? '–ß–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤' : '–°–æ–∑–¥–∞—ë–º —Å –Ω—É–ª—è'}
                </p>
              </div>
            </div>

            <div className="bg-white rounded-lg p-6 border border-gray-200 mb-8">
              <h3 className="font-semibold text-gray-900 mb-4">–ß—Ç–æ –¥–∞–ª—å—à–µ:</h3>
              <div className="space-y-3 text-left">
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-xs font-bold text-gray-700">1</span>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">–ü–æ–ª—É—á–µ–Ω–∏–µ –≤ —á–∞—Ç-–±–æ—Ç–µ</p>
                    <p className="text-xs text-gray-600">–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-xs font-bold text-gray-700">2</span>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏</p>
                    <p className="text-xs text-gray-600">–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                    <span className="text-xs font-bold text-gray-700">3</span>
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">–û–±—Å—É–∂–¥–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π</p>
                    <p className="text-xs text-gray-600">–°–æ—Å—Ç–∞–≤–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –±—Ä–∏—Ñ –∏ –æ–±—Å—É–¥–∏–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞</p>
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-3">
              <button
                onClick={() => {
                  // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö
                  localStorage.removeItem('tl_selected_service');
                  localStorage.removeItem('tl_design_type');
                  localStorage.removeItem('tl_category');
                  localStorage.removeItem('tl_has_brandbook');
                  router.push('/catalog');
                }}
                className="w-full bg-gray-800 text-white py-4 px-6 rounded-lg font-semibold text-lg hover:bg-gray-900 transition-all duration-200"
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
              </button>
              
              <button
                onClick={() => animatedStepChange(1)}
                className="w-full bg-gray-100 text-gray-700 py-3 px-6 rounded-lg font-medium hover:bg-gray-200 transition-all duration-200"
              >
                –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É
              </button>
            </div>
          </div>
        )}

        {/* Step 8: Production Product Selection */}
        {currentStep === 8 && (
          <div className="text-center mb-8 pb-2.5">
            <button
              onClick={() => animatedStepChange(1)}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>

            {/* Progress Steps */}
            <div className="w-full flex justify-center">
              <ProgressSteps />
            </div>

            {/* Clothing Products */}
            <div className="mb-8">
              <h3 className="text-lg font-semibold text-gray-800 mb-4 text-left">–û–¥–µ–∂–¥–∞</h3>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                {getProductsByCategory('clothing').map(product => (
                  <div key={product.id} className="text-center">
                    <button
                      onClick={() => toggleProduct(product.name)}
                      className={`w-full h-20 p-3 rounded-lg border-2 transition-all duration-200 text-sm font-medium flex flex-col items-center justify-center ${
                        selectedProducts.includes(product.name)
                          ? 'border-[#303030] bg-[#303030] text-white'
                          : 'border-gray-200 bg-white text-gray-700 hover:border-gray-400'
                      }`}
                    >
                      <div className="font-medium">{product.name}</div>
                      {selectedProducts.includes(product.name) && (
                        <div className="mt-2 flex items-center justify-center gap-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              decreaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            ‚àí
                          </button>
                          <span className="text-sm font-medium min-w-[40px]">
                            {productQuantities[product.name] || 10} —à—Ç.
                          </span>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              increaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            +
                          </button>
                        </div>
                      )}
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Accessories Products */}
            <div className="mb-8">
              <h3 className="text-lg font-semibold text-gray-800 mb-4 text-left">–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</h3>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                {getProductsByCategory('accessories').map(product => (
                  <div key={product.id} className="text-center">
                    <button
                      onClick={() => toggleProduct(product.name)}
                      className={`w-full h-20 p-3 rounded-lg border-2 transition-all duration-200 text-sm font-medium flex flex-col items-center justify-center ${
                        selectedProducts.includes(product.name)
                          ? 'border-[#303030] bg-[#303030] text-white'
                          : 'border-gray-200 bg-white text-gray-700 hover:border-gray-400'
                      }`}
                    >
                      <div className="font-medium">{product.name}</div>
                      {selectedProducts.includes(product.name) && (
                        <div className="mt-2 flex items-center justify-center gap-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              decreaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            ‚àí
                          </button>
                          <span className="text-sm font-medium min-w-[40px]">
                            {productQuantities[product.name] || 10} —à—Ç.
                          </span>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              increaseQuantity(product.name);
                            }}
                            className="w-6 h-6 flex items-center justify-center bg-white text-[#303030] rounded border hover:bg-gray-100 text-sm font-bold"
                          >
                            +
                          </button>
                        </div>
                      )}
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* Continue Button */}
            {selectedProducts.length > 0 && (
              <button
                onClick={() => animatedStepChange(9)}
                className="w-full bg-[#303030] text-white py-4 px-6 rounded-lg text-lg font-medium hover:bg-gray-800 transition-colors"
              >
                –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
              </button>
            )}
          </div>
        )}

        {/* Step 9: Production Proposal */}
        {currentStep === 9 && (
          <div className="text-center mb-8 pb-2.5">
            <button
              onClick={() => animatedStepChange(8)}
              className="flex items-center gap-2 text-gray-600 hover:text-gray-800 mb-6"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              –ù–∞–∑–∞–¥
            </button>

            {/* Progress Steps */}
            <div className="w-full flex justify-center">
              <ProgressSteps />
            </div>

            {/* Order Summary */}
            <div className="bg-gray-50 rounded-lg p-4 mb-6 text-left">
              <h4 className="font-semibold text-gray-800 mb-3">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</h4>
              <div className="space-y-2">
                {selectedProducts.map(product => (
                  <div key={product} className="flex justify-between items-center text-sm">
                    <span className="text-gray-700">{product}</span>
                    <span className="font-medium text-gray-900">
                      {productQuantities[product] || 10} —à—Ç.
                    </span>
                  </div>
                ))}
              </div>
              <div className="border-t border-gray-200 mt-3 pt-3">
                <div className="flex justify-between items-center font-semibold">
                  <span>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                  <span>
                    {Object.values(productQuantities).reduce((sum, qty) => sum + (qty || 10), 0)} —à—Ç.
                  </span>
                </div>
              </div>
            </div>

            <div className="space-y-3">
              <button
                onClick={() => animatedStepChange(8)}
                className="w-full bg-gray-100 text-gray-700 py-3 px-6 rounded-lg font-medium hover:bg-gray-200 transition-all duration-200"
              >
                –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
              </button>
              
              <button
                onClick={handleProductionFinish}
                disabled={isSubmitting}
                className={`w-full py-3 px-6 rounded-lg font-medium transition-all duration-200 ${
                  isSubmitting
                    ? 'bg-gray-400 text-white cursor-not-allowed'
                    : 'bg-[#303030] text-white hover:bg-black'
                }`}
              >
                {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
              </button>
            </div>

            {submitError && (
              <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                <p className="text-red-600 text-sm">{submitError}</p>
              </div>
            )}
          </div>
        )}

        {/* Step 10: Production Complete */}
        {currentStep === 10 && (
          <div className="text-center mb-8 pb-2.5">
            <div className="mb-6">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <p className="text-gray-600 text-lg mb-6">
                –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
              </p>
              
              {orderNumber && (
                <div className="bg-gray-50 rounded-lg p-4 mb-6">
                  <p className="text-sm text-gray-600 mb-1">–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</p>
                  <p className="text-lg font-bold text-gray-900">#{orderNumber}</p>
                </div>
              )}
            </div>

            <div className="space-y-3">
              <button
                onClick={() => router.push('/catalog')}
                className="w-full bg-[#303030] text-white py-3 px-6 rounded-lg font-medium hover:bg-black transition-all duration-200"
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
              </button>
              
              <button
                onClick={() => animatedStepChange(1)}
                className="w-full bg-gray-100 text-gray-700 py-3 px-6 rounded-lg font-medium hover:bg-gray-200 transition-all duration-200"
              >
                –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É
              </button>
            </div>
          </div>
        )}
        </div>
      </div>

      {/* Footer */}
      <div className="text-center pb-6">
        <p className="text-xs text-gray-400">
          Total Lookas B2B Platform
        </p>
      </div>
    </div>
  );
}

// –ì–ª–∞–≤–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
export default function HomePage() {
  return <WelcomePageContent />;
}
