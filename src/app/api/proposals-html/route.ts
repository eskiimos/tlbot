import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';

// Simple HTML template for commercial proposal
function generateProposalHTML(cartItems: any[], userData?: any) {
  const total = cartItems.reduce((s: number, it: any) => s + (Number(it.totalPrice) || 0), 0);
  const rows = cartItems
    .map((it: any, idx: number) => {
      const qty = Number(it.quantity) || 1;
      const unit = (Number(it.totalPrice) || 0) / qty;
      return `
        <tr>
          <td>${idx + 1}</td>
          <td><strong>${it.productName ?? it.name ?? '–¢–æ–≤–∞—Ä'}</strong></td>
          <td style="text-align:center;">${qty} —à—Ç.</td>
          <td style="text-align:right;">${unit.toLocaleString('ru-RU')} ‚ÇΩ</td>
          <td style="text-align:right;">${(Number(it.totalPrice) || 0).toLocaleString('ru-RU')} ‚ÇΩ</td>
        </tr>`;
    })
    .join('');

  return `<!doctype html>
<html lang="ru">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</title>
<style>
  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; margin: 0 auto; max-width: 860px; padding: 20px; color: #222; }
  h1 { font-size: 22px; margin: 0 0 12px; }
  .muted { color: #666; font-size: 12px; }
  table { width: 100%; border-collapse: collapse; font-size: 12px; margin-top: 14px; }
  th, td { border: 1px solid #e5e7eb; padding: 8px; vertical-align: top; }
  th { background: #111; color: #fff; text-align: center; }
  tfoot td { font-weight: 700; background: #f5f5f5; }
</style>
</head>
<body>
  <h1>–ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï</h1>
  <div class="muted">–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}</div>
  <table>
    <thead>
      <tr>
        <th style="width:6%">‚Ññ</th>
        <th style="width:50%">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
        <th style="width:12%">–ö–æ–ª-–≤–æ</th>
        <th style="width:16%">–¶–µ–Ω–∞</th>
        <th style="width:16%">–°—É–º–º–∞</th>
      </tr>
    </thead>
    <tbody>${rows}</tbody>
    <tfoot>
      <tr>
        <td colspan="4">–ò–¢–û–ì–û</td>
        <td style="text-align:right;">${total.toLocaleString('ru-RU')} ‚ÇΩ</td>
      </tr>
    </tfoot>
  </table>
  <p class="muted">–≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ö–ü. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</p>
</body>
</html>`;
}

function escapeMdV2(text: string) {
  // minimal escaping for MarkdownV2 special chars
  return text.replace(/[\_\*\[\]\(\)~`>#+\-=|{}\.]/g, (m) => `\\${m}`);
}

export async function POST(request: NextRequest) {
  const openBotUrl = 'https://t.me/Totallookas_bot';
  console.log('üöÄ POST /api/proposals-html');

  try {
    const contentType = request.headers.get('content-type') || '';
    let cartItems: any[] = [];
    let userData: any = undefined;

    if (contentType.includes('application/json')) {
      const body = await request.json();
      cartItems = Array.isArray(body?.cartItems) ? body.cartItems : [];
      userData = body?.userData;
      console.log('üì¶ JSON parsed', { items: cartItems.length, hasUserData: Boolean(userData) });
    } else if (contentType.includes('multipart/form-data')) {
      const form = await request.formData();
      const cartRaw = form.get('cartItems');
      const userRaw = form.get('userData');
      const telegramIdRaw = form.get('telegramId');
      try { cartItems = cartRaw ? JSON.parse(String(cartRaw)) : []; } catch { cartItems = []; }
      try { userData = userRaw ? JSON.parse(String(userRaw)) : undefined; } catch { userData = undefined; }
      if (!userData && telegramIdRaw) userData = { telegramId: String(telegramIdRaw) };
      console.log('üì¶ FormData parsed', { items: cartItems.length, hasUserData: Boolean(userData), telegramId: userData?.telegramId });
    } else {
      return NextResponse.json({ error: 'Unsupported Content-Type' }, { status: 400 });
    }

    if (!Array.isArray(cartItems) || cartItems.length === 0) {
      return NextResponse.json({ error: 'Cart is empty' }, { status: 400 });
    }

    const telegramId = userData?.telegramId ? String(userData.telegramId) : '';
    if (!telegramId) {
      return NextResponse.json({
        error: 'Telegram ID is missing',
        action: 'askUserToOpenBotAndPressStart',
        openBotUrl,
      }, { status: 400 });
    }

    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('‚ùå Missing TELEGRAM_BOT_TOKEN');
      return NextResponse.json({ error: 'Bot configuration is missing' }, { status: 500 });
    }

    const html = generateProposalHTML(cartItems, userData);
    console.log('‚úÖ HTML generated', { length: html.length });

    const bot = new Telegraf(botToken);

    const lines = cartItems.map((it: any, i: number) => `${i + 1}. ${it.productName ?? it.name ?? '–¢–æ–≤–∞—Ä'} ‚Äî ${Number(it.quantity) || 1} —à—Ç.`);
    const header = '–í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!';
    const text = [header, '', ...lines].map(escapeMdV2).join('\n');

    console.log('üì§ sendMessage', { telegramId, lines: lines.length });

    try {
      const res = await bot.telegram.sendMessage(telegramId, text, {
        parse_mode: 'MarkdownV2',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ö–ü (HTML)', url: `data:text/html;charset=utf-8,${encodeURIComponent(html)}` }],
            [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', url: 'https://t.me/akopytin' }],
          ],
        },
      });

      console.log('‚úÖ sent', { message_id: (res as any)?.message_id });
      return NextResponse.json({ ok: true, messageId: (res as any)?.message_id });
    } catch (e: any) {
      const msg = String(e?.message || e);
      console.error('‚ùå Telegram error', msg);
      const isChatNotFound = /chat not found|bot was blocked|Forbidden/i.test(msg);
      if (isChatNotFound) {
        return NextResponse.json({
          error: '–ß–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
          hint: '–û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ Start, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É',
          openBotUrl,
          telegramId,
          telegramError: msg,
        }, { status: 400 });
      }
      return NextResponse.json({ error: 'Telegram send failed', telegramError: msg }, { status: 502 });
    }
  } catch (err: any) {
    console.error('‚ùå Server error', err);
    return NextResponse.json({ error: 'Internal server error', details: String(err?.message || err) }, { status: 500 });
  }
}
