import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';

// HTML —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
const generateProposalHTML = (cartItems: any[], userData: any) => {
  const getTotalAmount = () => {
    return cartItems.reduce((total, item) => total + item.totalPrice, 0);
  };

  const getOptionsPrice = (item: any) => {
    if (!item.detailedProposal) return 0;
    return item.optionsDetails?.reduce((total: number, option: any) => total + option.price, 0) || 0;
  };

  const getOptionsByCategory = (item: any) => {
    const categorizedOptions: { [category: string]: string[] } = {};
    if (item.optionsDetails) {
      item.optionsDetails.forEach((option: any) => {
        if (!categorizedOptions[option.category]) {
          categorizedOptions[option.category] = [];
        }
        categorizedOptions[option.category].push(option.name);
      });
    }
    return categorizedOptions;
  };

  return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - Total Lookas</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #fff;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #000;
            padding-bottom: 20px;
        }
        .logo {
            font-size: 24px;
            font-weight: bold;
            color: #000;
            margin-bottom: 10px;
        }
        .subtitle {
            color: #666;
            font-size: 14px;
        }
        .section {
            margin-bottom: 25px;
        }
        .section-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #000;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border: 1px solid #ddd;
            font-size: 13px;
        }
        th {
            background-color: #f5f5f5;
            font-weight: bold;
        }
        .price {
            text-align: right;
        }
        .total-row {
            background-color: #f9f9f9;
            font-weight: bold;
        }
        .contact-info {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-top: 30px;
        }
        .customer-info {
            background-color: #fff;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        .note {
            background-color: #e7f3ff;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            font-size: 14px;
        }
        .options {
            margin-top: 5px;
            font-size: 12px;
            color: #666;
        }
        .option-category {
            margin-bottom: 3px;
        }
        @media print {
            body { margin: 0; padding: 15px; }
            .contact-info { break-inside: avoid; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">TOTAL LOOKAS</div>
        <div class="subtitle">–ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—á –≤ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç—ã</div>
    </div>

    <div class="section">
        <div class="section-title">üìã –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</div>
        <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('ru-RU')}</p>
        <p><strong>–ù–æ–º–µ—Ä:</strong> –ö–ü-${Date.now().toString().slice(-6)}</p>
    </div>

    <div class="section">
        <div class="section-title">üë§ –ó–∞–∫–∞–∑—á–∏–∫</div>
        <div class="customer-info">
            <p><strong>–ò–º—è:</strong> ${userData.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            ${userData.phoneNumber ? `<p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${userData.phoneNumber}</p>` : ''}
            ${userData.email ? `<p><strong>Email:</strong> ${userData.email}</p>` : ''}
            ${userData.inn ? `<p><strong>–ò–ù–ù:</strong> ${userData.inn}</p>` : ''}
        </div>
    </div>

    <div class="section">
        <div class="section-title">üõçÔ∏è –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞</div>
        <table>
            <thead>
                <tr>
                    <th style="width: 5%;">‚Ññ</th>
                    <th style="width: 50%;">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th style="width: 10%;">–ö–æ–ª-–≤–æ</th>
                    <th style="width: 17.5%;">–¶–µ–Ω–∞ –∑–∞ –µ–¥.</th>
                    <th style="width: 17.5%;">–°—É–º–º–∞</th>
                </tr>
            </thead>
            <tbody>
                ${cartItems.map((item, index) => {
                  const categorizedOptions = getOptionsByCategory(item);
                  const unitPrice = item.totalPrice / item.quantity;
                  return `
                    <tr>
                        <td>${index + 1}</td>
                        <td>
                            <strong>${item.productName}</strong>
                            ${item.detailedProposal ? `
                                <div class="options">
                                    <div><strong>–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞:</strong> ${item.basePrice.toLocaleString('ru-RU')} ‚ÇΩ</div>
                                    ${Object.entries(categorizedOptions).map(([category, options]) => `
                                        <div class="option-category">
                                            <strong>${category}:</strong> ${(options as string[]).join(', ')}
                                        </div>
                                    `).join('')}
                                    ${getOptionsPrice(item) > 0 ? `<div><strong>–î–æ–ø–ª–∞—Ç—ã:</strong> +${getOptionsPrice(item).toLocaleString('ru-RU')} ‚ÇΩ</div>` : ''}
                                </div>
                            ` : ''}
                        </td>
                        <td style="text-align: center;">${item.quantity} —à—Ç.</td>
                        <td class="price">${unitPrice.toLocaleString('ru-RU')} ‚ÇΩ</td>
                        <td class="price">${item.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ</td>
                    </tr>
                  `;
                }).join('')}
                <tr class="total-row">
                    <td colspan="4"><strong>–ò–¢–û–ì–û:</strong></td>
                    <td class="price"><strong>${getTotalAmount().toLocaleString('ru-RU')} ‚ÇΩ</strong></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="note">
        <strong>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong><br>
        –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
    </div>

    <div class="contact-info">
        <div class="section-title">üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
        <p><strong>–ú–µ–Ω–µ–¥–∂–µ—Ä:</strong> –ê–Ω–¥—Ä–µ–π –ö–æ–ø—ã—Ç–∏–Ω</p>
        <p><strong>Telegram:</strong> @akopytin</p>
        <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> +7 (910) 123-45-67</p>
        <p><strong>Email:</strong> info@totallookas.ru</p>
        <p><strong>–°–∞–π—Ç:</strong> totallookas.ru</p>
    </div>

    <div style="text-align: center; margin-top: 30px; color: #666; font-size: 12px;">
        Total Lookas ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—á –≤ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç—ã!<br>
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${new Date().toLocaleString('ru-RU')}
    </div>
</body>
</html>
  `;
};

export async function POST(request: NextRequest) {
  console.log('üöÄ API /api/proposals-html –≤—ã–∑–≤–∞–Ω');
  
  try {
    const { cartItems, userData } = await request.json();
    
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
      itemsCount: cartItems?.length,
      hasUserData: Boolean(userData)
    });

    if (!cartItems || !Array.isArray(cartItems)) {
      return NextResponse.json({ error: '–î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json({ error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }, { status: 500 });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
    const htmlContent = generateProposalHTML(cartItems, userData);
    console.log('‚úÖ HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä:', htmlContent.length, '—Å–∏–º–≤–æ–ª–æ–≤');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const bot = new Telegraf(botToken);
    
    const proposalText = `üéâ *–í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!*

üìã *–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*
${cartItems.map((item: any, index: number) => 
  `${index + 1}\\. ${item.productName} \\- ${item.quantity} —à—Ç\\. \\(${item.totalPrice.toLocaleString('ru-RU')} ‚ÇΩ\\)`
).join('\n')}

üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* ${cartItems.reduce((total: number, item: any) => total + item.totalPrice, 0).toLocaleString('ru-RU')} ‚ÇΩ

üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:*
üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: –ê–Ω–¥—Ä–µ–π –ö–æ–ø—ã—Ç–∏–Ω
üì± Telegram: @akopytin
‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: \\+7 \\(910\\) 123\\-45\\-67
üìß Email: info@totallookas\\.ru

üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è? –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏\\!

üöÄ Total Lookas ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—á –≤ –∞—Ä—Ç\\-–æ–±—ä–µ–∫—Ç—ã\\!`;

    try {
      const sentMessage = await bot.telegram.sendMessage(
        userData.telegramId || '228594178',
        proposalText,
        { 
          parse_mode: 'MarkdownV2',
          reply_markup: {
            inline_keyboard: [
              [
                { 
                  text: 'üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ö–ü (HTML)', 
                  url: `data:text/html;charset=utf-8,${encodeURIComponent(htmlContent)}`
                }
              ],
              [
                { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', url: 'https://t.me/akopytin' }
              ]
            ]
          }
        }
      );
      
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, message_id: ${sentMessage.message_id}`);
      
      return NextResponse.json({ 
        message: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
        messageId: sentMessage.message_id,
        format: 'html'
      });

    } catch (telegramError: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
      
      const errorMessage = telegramError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram';
      
      if (errorMessage.includes('chat not found') || errorMessage.includes('Bad Request')) {
        return NextResponse.json({ 
          error: '–ß–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω', 
          details: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start. ID: ${userData.telegramId}`
        }, { status: 400 });
      }
      
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram', 
        details: errorMessage
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error);
    
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    }, { status: 500 });
  }
}
