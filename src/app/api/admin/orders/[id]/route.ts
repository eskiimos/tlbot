import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../../lib/prisma';
import { Telegraf } from 'telegraf';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuth(request: NextRequest) {
  const token = request.cookies.get('admin-token')?.value;
  if (!token) {
    throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as any;
    const admin = await prisma.admin.findUnique({
      where: { id: decoded.adminId }
    });
    
    if (!admin) {
      throw new Error('–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    return admin;
  } catch (error) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendStatusNotification(telegramId: string, orderId: string, newStatus: string, adminComment?: string) {
  const statusMessages = {
    'NEW': 'üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
    'IN_PROGRESS': '‚öôÔ∏è –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
    'DESIGN': 'üé® –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–∏–∑–∞–π–Ω–æ–º',
    'PRODUCTION': 'üè≠ –ó–∞–ø—É—â–µ–Ω–æ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
    'READY': '‚úÖ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
    'COMPLETED': 'üéâ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
    'CANCELLED': '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω'
  };

  const message = 
    `üîÑ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #${orderId.slice(-8)} –∏–∑–º–µ–Ω–∏–ª—Å—è!\n\n` +
    `–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${statusMessages[newStatus as keyof typeof statusMessages] || newStatus}\n\n` +
    (adminComment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${adminComment}\n\n` : '') +
    `–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ! üöÄ\n\n` +
    `‚Äî –ö–æ–º–∞–Ω–¥–∞ Total Lookas`;

  try {
    await bot.telegram.sendMessage(telegramId, message);
    console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId} –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ ${newStatus}`);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, error);
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    await checkAuth(request);

    const orderId = params.id;

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.findUnique({
      where: { id: orderId }
    });

    if (!order) {
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    let userData = null;
    if (order.userId) {
      try {
        userData = await prisma.user.findUnique({
          where: { id: order.userId },
          select: {
            username: true,
            firstName: true,
            lastName: true,
          },
        });
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è JSON
    const orderData = {
      ...order,
      totalAmount: Number(order.totalAmount), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
      user: userData,
      createdAt: order.createdAt.toISOString(),
      updatedAt: order.updatedAt.toISOString(),
    };

    console.log('üîç Order data for debugging:', JSON.stringify(orderData, null, 2));
    console.log('üõçÔ∏è Order items:', orderData.items);

    return NextResponse.json({ order: orderData });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    const status = message.includes('–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') || message.includes('—Ç–æ–∫–µ–Ω') ? 401 : 500;
    return NextResponse.json({ error: message }, { status });
  }
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    await checkAuth(request);

    const { status, adminComment } = await request.json();
    const orderId = params.id;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑
    const currentOrder = await prisma.order.findUnique({
      where: { id: orderId }
    });

    if (!currentOrder) {
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const updatedOrder = await prisma.order.update({
      where: { id: orderId },
      data: {
        status,
        adminComment: adminComment || currentOrder.adminComment,
        updatedAt: new Date()
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (currentOrder.status !== status) {
      await sendStatusNotification(
        currentOrder.telegramId, 
        orderId, 
        status, 
        adminComment
      );
    }

    console.log(`–ó–∞–∫–∞–∑ #${orderId} –æ–±–Ω–æ–≤–ª–µ–Ω: —Å—Ç–∞—Ç—É—Å ${status}`);

    return NextResponse.json({ 
      message: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω',
      order: {
        ...updatedOrder,
        createdAt: updatedOrder.createdAt.toISOString(),
        updatedAt: updatedOrder.updatedAt.toISOString()
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    const status = message.includes('–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') || message.includes('—Ç–æ–∫–µ–Ω') ? 401 : 500;
    return NextResponse.json({ error: message }, { status });
  }
}
