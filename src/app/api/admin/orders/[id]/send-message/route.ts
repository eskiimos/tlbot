import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../../../lib/prisma';
import { Telegraf } from 'telegraf';
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function checkAuth(request: NextRequest) {
  const token = request.cookies.get('admin-token')?.value;
  if (!token) {
    throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET) as any;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ë–î
    if (decoded.adminId !== 'admin') {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }
    
    return { id: 'admin', username: decoded.username || 'admin' };
  } catch (error) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
  }
}

// POST - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const admin = await checkAuth(request);
    const { content } = await request.json();

    if (!content || content.trim() === '') {
      return NextResponse.json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' }, { status: 400 });
    }

    const { id: orderId } = await params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      select: { 
        id: true, 
        telegramId: true, 
        customerName: true,
        userId: true
      }
    });

    if (!order) {
      return NextResponse.json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ
    const comment = await prisma.orderComment.create({
      data: {
        orderId,
        content: content.trim(),
        isAdmin: true,
        authorName: admin.username
      }
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    try {
      const message = 
        `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É #${order.id.slice(-8)}:\n\n` +
        `${content.trim()}\n\n` +
        `üìù –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.`;

      await bot.telegram.sendMessage(order.telegramId, message, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
              { text: `üí¨ –ß–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É #${order.id.slice(-8)}`, callback_data: `chat_${order.id}` }
            ]
          ]
        }
      });

      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${order.telegramId} –ø–æ –∑–∞–∫–∞–∑—É ${orderId}`);
    } catch (telegramError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
      // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞–∑–µ
    }

    return NextResponse.json({
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫—É',
      comment: {
        ...comment,
        createdAt: comment.createdAt.toISOString()
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    const message = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    const status = message.includes('–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') || message.includes('—Ç–æ–∫–µ–Ω') ? 401 : 500;
    return NextResponse.json({ error: message }, { status });
  }
}
