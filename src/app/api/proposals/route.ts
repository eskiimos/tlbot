import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';
import { Input } from 'telegraf';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('file') as Blob | null;
    const telegramId = formData.get('telegramId') as string | null;

    if (!file || !telegramId) {
      return NextResponse.json({ error: '–§–∞–π–ª –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if (telegramId === '123456789') {
      console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      return NextResponse.json({ 
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º).',
        mode: 'development'
      }, { status: 200 });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Blob –≤ Buffer, —á—Ç–æ–±—ã Telegraf –º–æ–≥ —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å
    const fileBuffer = Buffer.from(await file.arrayBuffer());

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.telegram.sendDocument(
      telegramId,
      Input.fromBuffer(fileBuffer, `commercial-proposal-${telegramId}.pdf`),
      {
        caption: '–í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!',
      }
    );

    return NextResponse.json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' }, { status: 200 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Error
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.', details: errorMessage }, { status: 500 });
  }
}
