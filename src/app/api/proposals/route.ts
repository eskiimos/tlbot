import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';
import { Input } from 'telegraf';

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF
export async function POST(request: NextRequest) {
  console.log('üöÄ API /api/proposals –≤—ã–∑–≤–∞–Ω');
  console.log('üìç Environment:', process.env.NODE_ENV);
  console.log('üîë Bot token exists:', Boolean(process.env.TELEGRAM_BOT_TOKEN));
  console.log('üîë Bot token length:', process.env.TELEGRAM_BOT_TOKEN?.length || 0);
  
  let file: Blob | null = null;
  let telegramId: string | null = null;
  let orderData: any = null;
  
  try {
    console.log('üìù –ü–∞—Ä—Å–∏–Ω–≥ formData...');
    const formData = await request.formData();
    console.log('‚úÖ FormData —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
    
    file = formData.get('file') as Blob | null;
    telegramId = formData.get('telegramId') as string | null;
    
    console.log('üìÅ File size:', file?.size);
    console.log('üë§ Telegram ID:', telegramId);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–æ—Ä–º—ã
    const orderDataString = formData.get('orderData') as string | null;
    if (orderDataString) {
      try {
        orderData = JSON.parse(orderDataString);
        console.log('üì¶ Order data parsed successfully');
      } catch (jsonError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ orderData JSON:', jsonError);
      }
    }

    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É PDF:', {
      hasFile: Boolean(file),
      fileSize: file?.size,
      telegramId: telegramId,
      hasOrderData: Boolean(orderData)
    });

    if (!file || !telegramId) {
      return NextResponse.json({ error: '–§–∞–π–ª –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return NextResponse.json({ error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' }, { status: 500 });
    }

    console.log('‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞–π–¥–µ–Ω, –¥–ª–∏–Ω–∞:', botToken.length);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (telegramId === '123456789' && process.env.NODE_ENV === 'development') {
      console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –ø—Ä–æ–ø—É—â–µ–Ω–∞');
      return NextResponse.json({ 
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º).',
        mode: 'development'
      }, { status: 200 });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç
    const bot = new Telegraf(botToken);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Blob –≤ Buffer
    const fileBuffer = Buffer.from(await file.arrayBuffer());

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ PDF –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}, —Ä–∞–∑–º–µ—Ä: ${fileBuffer.length} –±–∞–π—Ç`);

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const sentMessage = await bot.telegram.sendDocument(
        telegramId,
        Input.fromBuffer(fileBuffer, `commercial-proposal-${telegramId}.pdf`),
        {
          caption: `üéâ –í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n` +
                  `üìã –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Å–æ—Å—Ç–∞–≤–æ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∑–∞–∫–∞–∑–∞.\n\n` +
                  `üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è? –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏!\n\n` +
                  `üöÄ Total Lookas ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—á –≤ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç—ã!`,
        }
      );
      
      console.log(`‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, message_id: ${sentMessage.message_id}`);
      
      return NextResponse.json({ 
        message: 'PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!',
        messageId: sentMessage.message_id 
      }, { status: 200 });

    } catch (telegramError: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
      
      const errorMessage = telegramError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram';
      
      if (errorMessage.includes('chat not found') || errorMessage.includes('Bad Request')) {
        return NextResponse.json({ 
          error: '–ß–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω', 
          details: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start. ID: ${telegramId}`
        }, { status: 400 });
      }
      
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram', 
        details: errorMessage
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
    
    const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    const details = {
      telegramId: telegramId ? `${telegramId.substring(0, 3)}...` : 'undefined',
      fileExists: Boolean(file),
      fileSize: file ? file.size : 0,
      botToken: process.env.TELEGRAM_BOT_TOKEN ? 'exists' : 'missing',
      nodeEnv: process.env.NODE_ENV
    };

    console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', details);

    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.',
      details: errorMessage,
      diagnostics: details 
    }, { status: 500 });
  }
}
