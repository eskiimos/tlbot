import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';
import { Input } from 'telegraf';
import { prisma } from '../../../lib/prisma';

export async function POST(request: NextRequest) {
  let file: Blob | null = null;
  let telegramId: string | null = null;
  let orderData: any = null;
  
  try {
    const formData = await request.formData();
    file = formData.get('file') as Blob | null;
    telegramId = formData.get('telegramId') as string | null;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–æ—Ä–º—ã
    const orderDataString = formData.get('orderData') as string | null;
    if (orderDataString) {
      orderData = JSON.parse(orderDataString);
    }

    if (!file || !telegramId) {
      return NextResponse.json({ error: '–§–∞–π–ª –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    if (telegramId === '123456789' && !process.env.DEBUG_TELEGRAM_ID) {
      console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID)');
      return NextResponse.json({ 
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º).',
        mode: 'development'
      }, { status: 200 });
    }

    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DEBUG_TELEGRAM_ID
    const debugTelegramId = process.env.DEBUG_TELEGRAM_ID;
    const isLocalDevelopment = process.env.NODE_ENV === 'development';
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (isLocalDevelopment && debugTelegramId && (telegramId === '123456789' || telegramId !== debugTelegramId)) {
      console.log(`üß™ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –∑–∞–º–µ–Ω–∞ telegramId —Å ${telegramId} –Ω–∞ ${debugTelegramId}`);
      telegramId = debugTelegramId;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç –∑–¥–µ—Å—å, –∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
    const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Blob –≤ Buffer, —á—Ç–æ–±—ã Telegraf –º–æ–≥ —Å –Ω–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å
    const fileBuffer = Buffer.from(await file.arrayBuffer());

    try {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`);
      console.log(`–†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${fileBuffer.length} –±–∞–π—Ç`);
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
      try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
        const updates = await bot.telegram.getUpdates({
          offset: -100,
          limit: 100,
          timeout: 1
        });
        
        // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const botMessagesToDelete = updates
          .filter(update => 
            update.message && 
            update.message.chat.id.toString() === telegramId &&
            update.message.from?.is_bot === true
          )
          .slice(-10) // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
          .map(update => update.message!.message_id);
        
        // –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for (const messageId of botMessagesToDelete) {
          try {
            await bot.telegram.deleteMessage(telegramId, messageId);
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}`);
          } catch (deleteError: any) {
            console.log(`‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}: ${deleteError.message}`);
          }
        }
        
        console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${botMessagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      } catch (cleanupError: any) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: ${cleanupError.message}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const sentMessage = await bot.telegram.sendDocument(
        telegramId,
        Input.fromBuffer(fileBuffer, `commercial-proposal-${telegramId}.pdf`),
        {
          caption: `üéâ –í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n` +
                  `üìã –≠—Ç–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Å–æ—Å—Ç–∞–≤–æ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∑–∞–∫–∞–∑–∞. ` +
                  `–í –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏.\n\n` +
                  `üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è? –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞!\n\n` +
                  `üöÄ Total Lookas ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—á –≤ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç—ã!`,
        }
      );
      
      console.log(`–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, message_id: ${sentMessage.message_id}`);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫)
      if (orderData && telegramId !== '123456789') {
        try {
          console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞–Ω–Ω—ã–º–∏:', {
            userId: orderData.userId || telegramId,
            telegramId: telegramId,
            customerName: orderData.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            customerEmail: orderData.customerEmail,
            customerPhone: orderData.customerPhone,
            customerCompany: orderData.customerCompany,
            customerInn: orderData.customerInn,
            totalAmount: orderData.totalAmount || 0
          });
          
          const order = await prisma.order.create({
            data: {
              userId: orderData.userId || telegramId,
              telegramId: telegramId,
              customerName: orderData.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
              customerEmail: orderData.customerEmail,
              customerPhone: orderData.customerPhone,
              customerCompany: orderData.customerCompany,
              customerInn: orderData.customerInn,
              items: orderData.items || [],
              totalAmount: orderData.totalAmount || 0,
              status: 'NEW'
            }
          });
          
          console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}, ID –∑–∞–∫–∞–∑–∞: ${order.id}`);
          console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑:', {
            id: order.id,
            customerName: order.customerName,
            customerEmail: order.customerEmail,
            customerPhone: order.customerPhone,
            totalAmount: order.totalAmount
          });
        } catch (orderError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', orderError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ö–ü —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        }
      } else {
        console.log('‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', {
          hasOrderData: Boolean(orderData),
          isTestUser: telegramId === '123456789',
          telegramId
        });
      }
    } catch (telegramError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Telegram
      const errorMessage = telegramError instanceof Error ? telegramError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram';
      
      if (errorMessage.includes('chat not found') || errorMessage.includes('Bad Request')) {
        return NextResponse.json({ 
          error: '–ß–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω', 
          details: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start. ID: ${telegramId}`
        }, { status: 400 });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ Telegram
      const telegramErrorDetails = {
        message: errorMessage,
        stack: telegramError instanceof Error ? telegramError.stack : undefined,
        telegramId: telegramId
      };
      
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Telegram:', telegramErrorDetails);
      
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram', 
        details: errorMessage
      }, { status: 500 });
    }

    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    console.log(`‚úÖ –ö–ü —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`);
    return NextResponse.json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.' }, { status: 200 });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Error
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const details = {
      telegramId: telegramId ? `${telegramId.substring(0, 3)}...` : 'undefined', // –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å ID
      fileExists: Boolean(file),
      fileSize: file ? file.size : 0,
      botToken: process.env.TELEGRAM_BOT_TOKEN ? 'exists (length: ' + 
        process.env.TELEGRAM_BOT_TOKEN.length + ')' : 'missing'
    };

    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', details);

    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.',
      details: errorMessage,
      diagnostics: details 
    }, { status: 500 });
  }
}
