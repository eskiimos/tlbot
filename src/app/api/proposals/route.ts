import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';
import { Input } from 'telegraf';
import { generateProposalHTML } from '@/lib/generateProposalHTML';
import { prisma } from '@/lib/prisma';

const ADMIN_CHAT_ID = '6021853805'; // ID –∞–¥–º–∏–Ω–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async function sendAdminNotification(bot: Telegraf, clientTelegramId: string, orderData: any, fileName: string) {
  try {
    const clientInfo = orderData.customerName ? `${orderData.customerName}` : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const companyInfo = orderData.companyName ? ` (${orderData.companyName})` : '';
    const totalItems = orderData.items?.length || 0;
    const totalAmount = orderData.totalAmount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    const phoneNumber = orderData.customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const username = orderData.customerUsername ? `@${orderData.customerUsername}` : '–ù–µ —É–∫–∞–∑–∞–Ω';
    const inn = orderData.customerInn || '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    const adminMessage = `üîî <b>–ö–ü –û–¢–ü–†–ê–í–õ–ï–ù–û –ö–õ–ò–ï–ù–¢–£</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${clientInfo}${companyInfo}
üì± <b>Telegram:</b> ${username} (ID: <code>${clientTelegramId}</code>)
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phoneNumber}
üè¢ <b>–ò–ù–ù:</b> ${inn}
üìß <b>Email:</b> ${orderData.customerEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üõç <b>–ó–∞–∫–∞–∑:</b>
‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: ${totalItems} —à—Ç.
‚Ä¢ –°—É–º–º–∞: ${totalAmount}‚ÇΩ

üìÑ <b>–§–∞–π–ª:</b> ${fileName}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}

üí¨ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
üîÑ <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –ú–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ö–ü –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

#–ö–ü #–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ #–∫–ª–∏–µ–Ω—Ç`;

    await bot.telegram.sendMessage(ADMIN_CHAT_ID, adminMessage, {
      parse_mode: 'HTML'
    });
    
    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
  }
}

export async function POST(request: NextRequest) {
  console.log('üöÄ API /api/proposals –≤—ã–∑–≤–∞–Ω');
  console.log('üìç Environment:', process.env.NODE_ENV);
  console.log('üîë Bot token exists:', Boolean(process.env.TELEGRAM_BOT_TOKEN));
  console.log('üìÅ Import check:', Boolean(generateProposalHTML));
  console.log('üîç generateProposalHTML type:', typeof generateProposalHTML);
  
  let telegramId: string | null = null;
  let orderData: any = null;
  
  try {
    const formData = await request.formData();
    telegramId = formData.get('telegramId') as string | null;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–æ—Ä–º—ã
    const orderDataString = formData.get('orderData') as string | null;
    if (orderDataString) {
      try {
        orderData = JSON.parse(orderDataString);
        console.log('üì¶ Order data parsed successfully');
      } catch (jsonError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ orderData JSON:', jsonError);
        return NextResponse.json({ error: 'Invalid order data format' }, { status: 400 });
      }
    }

    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ö–ü:', {
      telegramId: telegramId,
      hasOrderData: Boolean(orderData)
    });

    if (!telegramId || !orderData) {
      return NextResponse.json({ error: 'Missing telegram ID or order data' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    console.log('üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω:', botToken ? `${botToken.substring(0, 15)}...` : '–ù–ï –ù–ê–ô–î–ï–ù');
    if (!botToken) {
      console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json({ error: 'Bot configuration missing' }, { status: 500 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    if (telegramId === '123456789' && process.env.NODE_ENV === 'development') {
      console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑, –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram');
      
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const savedOrder = await prisma.order.create({
        data: {
          userId: telegramId,
          telegramId: telegramId,
          customerName: orderData.customerName || '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
          customerEmail: orderData.customerEmail || null,
          customerPhone: orderData.customerPhone || null,
          customerCompany: orderData.customerCompany || null,
          customerInn: orderData.customerInn || null,
          items: orderData.items || [],
          totalAmount: Math.round(orderData.totalAmount || 0), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä—É–±–ª—è—Ö
          status: 'NEW'
        }
      });
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID:', savedOrder.id);
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await prisma.userOrderContext.upsert({
          where: { userId: telegramId },
          update: { orderId: savedOrder.id },
          create: { 
            userId: telegramId,
            orderId: savedOrder.id 
          }
        });
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', savedOrder.id);
      } catch (contextError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞:', contextError);
      }
      
      return NextResponse.json({ 
        message: 'Test mode: proposal generated successfully',
        mode: 'development',
        orderId: savedOrder.id
      }, { status: 200 });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç
    const bot = new Telegraf(botToken);
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ö–ü —á–µ—Ä–µ–∑ –±–æ—Ç–∞...');

    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
      
      const savedOrder = await prisma.order.create({
        data: {
          userId: telegramId,
          telegramId: telegramId,
          customerName: orderData.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          customerEmail: orderData.customerEmail || null,
          customerPhone: orderData.customerPhone || null,
          customerCompany: orderData.customerCompany || null,
          customerInn: orderData.customerInn || null,
          items: orderData.items || [],
          totalAmount: Math.round(orderData.totalAmount || 0), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä—É–±–ª—è—Ö
          status: 'NEW'
        }
      });
      
      console.log('‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID:', savedOrder.id);

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await prisma.userOrderContext.upsert({
          where: { userId: telegramId },
          update: { orderId: savedOrder.id },
          create: { 
            userId: telegramId,
            orderId: savedOrder.id 
          }
        });
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞:', savedOrder.id);
      } catch (contextError) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞:', contextError);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –ö–ü:', {
        detailedProposal: orderData.detailedProposal,
        items: orderData.items?.length,
        customer: orderData.customerName
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
      const htmlContent = generateProposalHTML({
        orderData,
        cartItems: (orderData.items || []).map((item: any) => ({
          ...item,
          // detailedProposal –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
          detailedProposal: item.detailedProposal || false
        })),
        userData: {
          telegramId: telegramId,
          firstName: orderData.customerName,
          email: orderData.customerEmail,
          companyName: orderData.companyName
        }
      });
      
      // –°–æ–∑–¥–∞–µ–º Buffer –∏–∑ HTML —Å—Ç—Ä–æ–∫–∏
      const htmlBuffer = Buffer.from(htmlContent, 'utf-8');
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = `–ö–ü_${orderData?.customerName?.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '_') || 'Total_Lookas'}_${new Date().toLocaleDateString('ru-RU').replace(/\./g, '_')}.html`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
      const sentMessage = await bot.telegram.sendDocument(
        telegramId,
        Input.fromBuffer(htmlBuffer, fileName),
        {
          caption: `üéâ –í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n` +
                  `üìã –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n` +
                  `üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è? –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏!\n\n` +
                  `üöÄ Total Lookas ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—á –≤ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç—ã!`
        }
      );
      
      console.log('‚úÖ HTML –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ç–æ–º, —á—Ç–æ –ö–ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      await sendAdminNotification(bot, telegramId, orderData, fileName);
      
      return NextResponse.json({ 
        message: 'HTML proposal sent successfully to Telegram',
        messageId: sentMessage.message_id
      }, { status: 200 });

    } catch (telegramError: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram:', telegramError);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Telegram
      const errorMessage = telegramError.message || 'Unknown Telegram error';
      if (errorMessage.includes('chat not found')) {
        return NextResponse.json({ 
          error: '–ß–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω',
          details: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start'
        }, { status: 400 });
      }
      
      return NextResponse.json({ 
        error: 'Telegram API error',
        details: errorMessage
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json({
      error: 'Internal server error',
      details: error.message || 'Unknown error'
    }, { status: 500 });
  }
}
