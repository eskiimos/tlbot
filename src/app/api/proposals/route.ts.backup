import { NextRequest, NextResponse } from 'next/server';
import { Telegraf } from 'telegraf';
import { formatProposal } from '@/lib/formatProposal';

export async function POST(request: NextRequest) {
  console.log('ðŸš€ API /api/proposals called');

  let telegramId: string | null = null;
  let orderData: any = null;

  try {
    const formData = await request.formData();
    telegramId = formData.get('telegramId') as string | null;

    const orderDataString = formData.get('orderData') as string | null;
    if (orderDataString) {
      try {
        orderData = JSON.parse(orderDataString);
      } catch (err) {
        console.error('Failed to parse orderData JSON:', err);
        return NextResponse.json({ error: 'Invalid orderData JSON' }, { status: 400 });
      }
    }

    if (!telegramId || !orderData) {
      return NextResponse.json({ error: 'Missing telegramId or orderData' }, { status: 400 });
    }

    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    if (!botToken) {
      console.error('TELEGRAM_BOT_TOKEN missing');
      return NextResponse.json({ error: 'Bot token missing' }, { status: 500 });
    }

    // Test mode skip
    if (telegramId === '123456789' && process.env.NODE_ENV === 'development') {
      console.log('Test mode: skipping actual Telegram send');
      return NextResponse.json({ message: 'Test mode: not sent' }, { status: 200 });
    }

    const bot = new Telegraf(botToken);

    try {
      const message = formatProposal(orderData);

      const sent = await bot.telegram.sendMessage(telegramId, message, {
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      });

      return NextResponse.json({ message: 'Sent', messageId: sent.message_id }, { status: 200 });
    } catch (telegramErr: any) {
      console.error('Telegram send error:', telegramErr);
      const msg = (telegramErr && telegramErr.message) || String(telegramErr);
      if (msg.includes('chat not found')) {
        return NextResponse.json({ error: 'Chat not found. Ask user to send /start to the bot.' }, { status: 400 });
      }
      return NextResponse.json({ error: 'Telegram error', details: msg }, { status: 500 });
    }
  } catch (err: any) {
    console.error('Server error in /api/proposals:', err);
    return NextResponse.json({ error: 'Internal server error', details: err?.message || String(err) }, { status: 500 });
  }
}
