'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import Link from 'next/link';
import UserDataForm from '@/components/UserDataForm';
import usePDFGenerator from '@/components/PDFGenerator';

interface CartItem {
  id: string;
  productName: string;
  productSlug: string;
  quantity: number;
  basePrice: number;
  selectedOptions: {[category: string]: string[]};
  optionsDetails: {
    id: string;
    name: string;
    category: string;
    price: number;
  }[];
  totalPrice: number;
  image?: string;
}

interface UserData {
  telegramId?: string;
  username?: string;
  firstName?: string;
  lastName?: string;
  phoneNumber?: string;
  email?: string;
  companyName?: string;
  inn?: string;
}

export default function CartPage() {
  const router = useRouter();
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [deletedItem, setDeletedItem] = useState<CartItem | null>(null);
  const [undoTimer, setUndoTimer] = useState<number | null>(null);
  const [timeLeft, setTimeLeft] = useState<number>(10);
  const [showUserDataForm, setShowUserDataForm] = useState(false);
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoadingUserData, setIsLoadingUserData] = useState(false);
  const [isMounted, setIsMounted] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const [sendResult, setSendResult] = useState<{type: 'success' | 'error' | 'test', message: string} | null>(null);
  const [configExpanded, setConfigExpanded] = useState<{[id: string]: boolean}>({});
  // Track when cart has been loaded from localStorage to avoid wiping it on first render
  const [hasLoadedCart, setHasLoadedCart] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö (–¥–ª—è –≥—Ä–∞–¥–∞—Ü–∏–∏ –∏ –æ–ø—Ü–∏–π)
  type PriceTier = { minQuantity: number; maxQuantity: number | null; price: number };
  type ProductOptionBrief = { id: string; category: string; name: string; price: number; isActive: boolean; description?: string };
  type ProductBrief = { slug: string; price: number; priceTiers: PriceTier[]; optionsByCategory: Record<string, ProductOptionBrief[]> };
  const [productsBySlug, setProductsBySlug] = useState<Record<string, ProductBrief>>({});

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–∞–ª–∫–∏ –æ–ø—Ü–∏–π
  const [optionsModal, setOptionsModal] = useState<{ itemId: string | null; category: 'design' | 'print' | 'label' | 'packaging' | null }>({ itemId: null, category: null });
  const [modalSelected, setModalSelected] = useState<string[]>([]);

  // –°—Ä–µ–¥–Ω—è—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ –ø—Ä–∏–Ω—Ç
  const PRINT_FLAT_PRICE = 300;

  // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Ñ–æ–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –º–æ–¥–∞–ª–∫–µ
  const anyModalOpen = !!showUserDataForm || (!!optionsModal.itemId && !!optionsModal.category);
  useEffect(() => {
    if (anyModalOpen) {
      document.body.style.overflow = 'hidden';
      document.documentElement.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
      document.documentElement.style.overflow = '';
    }
    return () => {
      document.body.style.overflow = '';
      document.documentElement.style.overflow = '';
    };
  }, [anyModalOpen]);

  // –ü–æ–º–æ—â–Ω–∏–∫–∏ —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  function getTierBasePrice(productSlug: string, quantity: number, fallbackBase: number): number {
    const key = (productSlug || '').toLowerCase();
    const product = productsBySlug[key];
    const tiers = (product?.priceTiers || []).slice().sort((a, b) => a.minQuantity - b.minQuantity);
    if (tiers.length === 0) return fallbackBase;
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
    for (const t of tiers) {
      const withinMax = t.maxQuantity === null || quantity <= t.maxQuantity;
      if (quantity >= t.minQuantity && withinMax) {
        return Number(t.price || 0);
      }
    }
    // –§–æ–ª–ª–±–µ–∫ ‚Äî —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π tier, —É –∫–æ—Ç–æ—Ä–æ–≥–æ minQuantity <= quantity
    const eligible = tiers.filter(t => quantity >= t.minQuantity);
    if (eligible.length > 0) {
      return Number(eligible[eligible.length - 1].price || 0);
    }
    // –ò–Ω–∞—á–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞/–±–∞–∑–∞
    return Number(tiers[0].price || fallbackBase || 0);
  }

  function getOptionsByCategory(item: CartItem): Record<'design' | 'print' | 'label' | 'packaging', string[]> {
    const res: Record<'design' | 'print' | 'label' | 'packaging', string[]> = {
      design: [],
      print: [],
      label: [],
      packaging: []
    };
    for (const d of item.optionsDetails || []) {
      if (d.category === 'design' || d.category === 'print' || d.category === 'label' || d.category === 'packaging') {
        res[d.category].push(d.name);
      }
    }
    return res;
  }

  function getOptionsPrice(item: CartItem): number {
    // –ï—Å–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚Äî –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –≤ —Ü–µ–Ω–µ
    if (!configExpanded[item.id]) return 0;
    // –î–∏–∑–∞–π–Ω –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
    return (item.optionsDetails || [])
      .filter(d => d.category !== 'design')
      .reduce((sum, d) => sum + Number(d.price || 0), 0);
  }

  function computeUnitPrice(item: CartItem, quantity: number): number {
    const base = getTierBasePrice(item.productSlug, quantity, item.basePrice);
    const options = getOptionsPrice(item);
    return Number(base) + Number(options);
  }

  function computeLineTotal(item: CartItem, quantity: number): number {
    return computeUnitPrice(item, quantity) * quantity;
  }

  function getTotalItems(): number {
    return cartItems.reduce((sum, i) => sum + Number(i.quantity || 0), 0);
  }

  function getTotalAmount(): number {
    return cartItems.reduce((sum, i) => sum + computeLineTotal(i, i.quantity), 0);
  }

  const { generatePdfBlob, ProposalComponent } = usePDFGenerator({ 
    cartItems, 
    userData: userData || {
      telegramId: '123456789',
      firstName: '',
      lastName: '',
      username: '',
      phoneNumber: '',
      email: '',
      companyName: '',
      inn: ''
    }
  });

  // 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    if (!isMounted) return;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    const loadCart = () => {
      try {
        const savedCart = localStorage.getItem('tlbot_cart');
        if (savedCart) {
          const cartData = JSON.parse(savedCart);
          setCartItems(cartData);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
      } finally {
        setIsLoading(false);
        // Mark cart as loaded (even if empty) to let dependent effects run safely
        setHasLoadedCart(true);
      }
    };
    loadCart();

    // Mock Telegram WebApp –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      (window as any).Telegram = {
        WebApp: {
          initDataUnsafe: {
            user: {
              id: 123456789,
              first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
              last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
              username: 'testuser',
              language_code: 'ru'
            }
          },
          initData: '',
          ready: () => console.log('Telegram WebApp ready'),
          expand: () => console.log('Telegram WebApp expanded'),
          close: () => console.log('Telegram WebApp closed'),
          MainButton: {
            text: '',
            color: '#229ED9',
            textColor: '#FFFFFF',
            isVisible: false,
            isActive: true,
            isProgressVisible: false,
            setText: () => {},
            onClick: () => {},
            offClick: () => {},
            show: () => {},
            hide: () => {},
            enable: () => {},
            disable: () => {},
            showProgress: () => {},
            hideProgress: () => {},
            setParams: () => {}
          },
          sendData: () => {}
        }
      } as any;
      console.log('üîß Mock Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    }
    loadUserData();
  }, [isMounted]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadUserData = async () => {
    if (typeof window === 'undefined') return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram WebApp
      if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
        const tgUser = window.Telegram.WebApp.initDataUnsafe.user;
        console.log('Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', tgUser);
        setIsLoadingUserData(true);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
        const response = await fetch(`/api/users?telegramId=${tgUser.id}`);
        if (response.ok) {
          const apiUserData = await response.json();
          console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ API:', apiUserData);
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const completeUserData: UserData = {
            telegramId: tgUser.id.toString(),
            username: tgUser.username,
            firstName: tgUser.first_name,
            lastName: tgUser.last_name,
            phoneNumber: apiUserData?.organization?.phone,
            email: apiUserData?.organization?.email,
            companyName: apiUserData?.organization?.contactName,
            inn: apiUserData?.organization?.inn
          };
          
          console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', completeUserData);
          setUserData(completeUserData);
        } else {
          console.log('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.status);
        }
      } else {
        console.log('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º localStorage');
        // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage
        const savedData = localStorage.getItem('tlbot_user_data');
        if (savedData) {
          console.log('–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ localStorage:', savedData);
          setUserData(JSON.parse(savedData));
        } else {
          console.log('–î–∞–Ω–Ω—ã–µ –≤ localStorage –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    } finally {
      setIsLoadingUserData(false);
    }
  };

  const handleSendProposal = async () => {
    return handleSendProposalWithData(userData);
  };

  const handleSendProposalWithData = async (userDataToUse: UserData | null) => {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!userDataToUse?.telegramId) {
      console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
      userDataToUse = {
        telegramId: '123456789', // –¢–µ—Å—Ç–æ–≤—ã–π ID
        username: 'test_user',
        firstName: '–¢–µ—Å—Ç',
        lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phoneNumber: '+7 (900) 123-45-67',
        email: 'test@example.com',
        companyName: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
        inn: '1234567890'
      };
      console.log("–°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:", userDataToUse);
    }

    console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ö–ü –≤ Telegram —Å –¥–∞–Ω–Ω—ã–º–∏:", userDataToUse);
    setIsSending(true);
    setSendResult(null);
    
    try {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
      console.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF...");
      const pdfBlob = await generatePdfBlob();
      if (!pdfBlob) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª");
        setSendResult({type: 'error', message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF —Ñ–∞–π–ª.'});
        setIsSending(false);
        return;
      }
      console.log("PDF —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:", pdfBlob.size);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formData = new FormData();
      const filename = `commercial-proposal-${userDataToUse.telegramId}.pdf`;
      formData.append('file', new File([pdfBlob], filename, { type: 'application/pdf' }));
      formData.append('telegramId', userDataToUse.telegramId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      const orderData = {
        userId: userDataToUse.telegramId,
        customerName: `${userDataToUse.firstName || ''} ${userDataToUse.lastName || ''}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        customerEmail: userDataToUse.email || '',
        customerPhone: userDataToUse.phoneNumber || '',
        customerCompany: userDataToUse.companyName || '',
        customerInn: userDataToUse.inn || '',
        items: cartItems,
        totalAmount: getTotalAmount() * 100 // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ø–µ–π–∫–∏
      };
      
      console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', orderData);
      formData.append('orderData', JSON.stringify(orderData));
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telegram WebApp, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
      if (window.Telegram?.WebApp?.sendData) {
        try {
          console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Telegram WebApp');
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –±–µ–∑ PDF
          window.Telegram.WebApp.sendData(JSON.stringify({
            type: 'commercial_proposal',
            orderData
          }));
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –±–æ—Ç');
        } catch (telegramError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram WebApp:', telegramError);
        }
      } else {
        console.log('‚ö†Ô∏è Telegram WebApp.sendData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ API');
      }
      
      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä, telegramId:", userDataToUse.telegramId, "filename:", filename);
      const response = await fetch('/api/proposals', {
        method: 'POST',
        body: formData,
      });

      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:", result);
        
        if (result.mode === 'development') {
          setSendResult({
            type: 'test', 
            message: 'üß™ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! (–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –ø—Ä–æ–ø—É—â–µ–Ω–∞)'
          });
        } else {
          setSendResult({
            type: 'success', 
            message: '‚úÖ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à Telegram!'
          });
        }
      } else {
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        try {
          const errorData = await response.json();
          console.error("–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ API:", errorData);
          errorMessage = errorData.details || errorData.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "—á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
          if (errorData.error === '–ß–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω') {
            errorMessage = 'ü§ñ –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start –≤ Telegram, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
          }
          
          // –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
          if (errorData.diagnostics) {
            console.error("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:", errorData.diagnostics);
          }
        } catch (e) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π:", e);
        }
        setSendResult({type: 'error', message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${errorMessage}`});
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ö–ü:", error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      setSendResult({type: 'error', message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${errorMessage}`});
    } finally {
      setIsSending(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –ª–æ–∫–∞–ª—å–Ω–æ
  const handleCreateCommercialOffer = async () => {
    try {
      setIsGeneratingPDF(true);
      const pdfBlob = await generatePdfBlob();
      if (!pdfBlob) return;
      const url = URL.createObjectURL(pdfBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'commercial-proposal.pdf';
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/—Å–∫–∞—á–∞—Ç—å PDF', e);
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  // –°–∞–±–º–∏—Ç —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ö–ü
  const handleFormSubmit = async (data: UserData) => {
    try {
      setUserData(data);
      setShowUserDataForm(false);
      await handleSendProposalWithData(data);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e);
    }
  };

  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
  useEffect(() => {
    if (undoTimer) {
      const timer = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ - –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
            setDeletedItem(null);
            setUndoTimer(null);
            clearInterval(timer);
            return 10;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [undoTimer]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
  const removeFromCart = (itemId: string) => {
    const itemToDelete = cartItems.find(item => item.id === itemId);
    if (!itemToDelete) return;

    // –£–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const updatedCart = cartItems.filter(item => item.id !== itemId);
    setCartItems(updatedCart);
    localStorage.setItem('tlbot_cart', JSON.stringify(updatedCart));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    setDeletedItem(itemToDelete);
    setTimeLeft(10);
    setUndoTimer(Date.now());
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
  const undoDelete = () => {
    if (deletedItem) {
      const updatedCart = [...cartItems, deletedItem];
      setCartItems(updatedCart);
      localStorage.setItem('tlbot_cart', JSON.stringify(updatedCart));
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
      setDeletedItem(null);
      setUndoTimer(null);
      setTimeLeft(10);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
  const updateQuantity = (itemId: string, newQuantity: number) => {
    if (newQuantity < 10) return;

    const updatedCart = cartItems.map(item => {
      if (item.id === itemId) {
        const newTotal = computeLineTotal(item, newQuantity);
        return { ...item, quantity: newQuantity, totalPrice: newTotal };
      }
      return item;
    });

    setCartItems(updatedCart);
    localStorage.setItem('tlbot_cart', JSON.stringify(updatedCart));
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ priceTiers –∏ –æ–ø—Ü–∏—è–º
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const res = await fetch(`/api/products?t=${Date.now()}`, { cache: 'no-store' as RequestCache });
        if (!res.ok) return;
        const data = await res.json();
        if (data?.success && Array.isArray(data.products)) {
          const map: Record<string, ProductBrief> = {};
          data.products.forEach((p: any) => {
            const key = (p.slug || '').toString().toLowerCase();
            const optionsByCategory: Record<string, ProductOptionBrief[]> = {};
            (p.options || []).forEach((opt: any) => {
              if (!optionsByCategory[opt.category]) optionsByCategory[opt.category] = [];
              optionsByCategory[opt.category].push({
                id: String(opt.id),
                category: opt.category,
                name: opt.name,
                price: Number(opt.price || 0),
                isActive: !!opt.isActive,
                description: opt.description || ''
              });
            });
            map[key] = { slug: key, price: p.price, priceTiers: p.priceTiers || [], optionsByCategory };
          });
          setProductsBySlug(map);
        }
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã', e);
      }
    };
    fetchProducts();
  }, []);

  const openOptionsModal = (itemId: string, category: 'design' | 'print' | 'label' | 'packaging') => {
    const item = cartItems.find(i => i.id === itemId);
    if (!item) return;
    const current = item.selectedOptions?.[category] || [];
    setModalSelected(current);
    setOptionsModal({ itemId, category });
  };

  const closeOptionsModal = () => {
    setOptionsModal({ itemId: null, category: null });
    setModalSelected([]);
  };

  const toggleModalOption = (optionId: string) => {
    if (!optionsModal.category) return;
    setModalSelected(prev => {
      const isSingle = optionsModal.category === 'design';
      if (isSingle) return [optionId];
      return prev.includes(optionId) ? prev.filter(id => id !== optionId) : [...prev, optionId];
    });
  };

  const saveModalOptions = () => {
    const { itemId, category } = optionsModal;
    if (!itemId || !category) return;
    const item = cartItems.find(i => i.id === itemId);
    if (!item) return;

    const slugKey = (item.productSlug || '').toLowerCase();
    const prod = productsBySlug[slugKey];
    const opts = (prod?.optionsByCategory?.[category] || []) as ProductOptionBrief[];

    const selectedDetails = modalSelected.map(id => {
      const found = opts.find(o => o.id === id);
      return found ? { id: found.id, name: found.name, category: found.category, price: found.price } : null;
    }).filter(Boolean) as { id: string; name: string; category: string; price: number }[];

    const updatedItem: CartItem = {
      ...item,
      selectedOptions: { ...item.selectedOptions, [category]: modalSelected },
      optionsDetails: [
        // –æ—Å—Ç–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –µ—Å—Ç—å
        ...item.optionsDetails.filter(o => o.category !== category),
        // –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–∑ –º–æ–¥–∞–ª–∫–∏
        ...selectedDetails
      ]
    };

    const newTotal = computeLineTotal(updatedItem, updatedItem.quantity);
    updatedItem.totalPrice = newTotal;

    const newCart = cartItems.map(ci => ci.id === updatedItem.id ? updatedItem : ci);
    setCartItems(newCart);
    localStorage.setItem('tlbot_cart', JSON.stringify(newCart));
    closeOptionsModal();
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ø–ª–æ—Å–∫–æ–π –æ–ø—Ü–∏–∏ –ø—Ä–∏–Ω—Ç–∞ (+300‚ÇΩ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É)
  const togglePrint = (itemId: string, enable: boolean) => {
    const item = cartItems.find(i => i.id === itemId);
    if (!item) return;

    const updatedDetails = (item.optionsDetails || []).filter(o => o.category !== 'print');
    if (enable) {
      updatedDetails.push({ id: 'print-flat', name: '–ü—Ä–∏–Ω—Ç', category: 'print', price: PRINT_FLAT_PRICE });
    }

    const updatedItem: CartItem = {
      ...item,
      selectedOptions: { ...item.selectedOptions, print: enable ? ['print-flat'] : [] },
      optionsDetails: updatedDetails
    };
    updatedItem.totalPrice = computeLineTotal(updatedItem, updatedItem.quantity);

    const newCart = cartItems.map(ci => ci.id === itemId ? updatedItem : ci);
    setCartItems(newCart);
    localStorage.setItem('tlbot_cart', JSON.stringify(newCart));
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ¬´–î–∏–∑–∞–π–Ω¬ª (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, –±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)
  const toggleDesign = (itemId: string, enable: boolean) => {
    const item = cartItems.find(i => i.id === itemId);
    if (!item) return;

    const updatedDetails = (item.optionsDetails || []).filter(o => o.category !== 'design');
    if (enable) {
      updatedDetails.push({ id: 'design-custom', name: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ', category: 'design', price: 0 });
    }

    const updatedItem: CartItem = {
      ...item,
      selectedOptions: { ...item.selectedOptions, design: enable ? ['design-custom'] : [] },
      optionsDetails: updatedDetails
    };
    updatedItem.totalPrice = computeLineTotal(updatedItem, updatedItem.quantity);

    const newCart = cartItems.map(ci => ci.id === itemId ? updatedItem : ci);
    setCartItems(newCart);
    localStorage.setItem('tlbot_cart', JSON.stringify(newCart));
  };

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º totalPrice —É —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  // Guard to avoid clearing cart in localStorage on first mount before it loads
  useEffect(() => {
    if (!hasLoadedCart) return;
    setCartItems(prev => {
      const updated = prev.map(item => ({
        ...item,
        totalPrice: computeLineTotal(item, item.quantity)
      }));
      try { localStorage.setItem('tlbot_cart', JSON.stringify(updated)); } catch {}
      return updated;
    });
  }, [configExpanded, hasLoadedCart]);

  if (isLoading || !isMounted) {
    return (
      <div className="min-h-screen bg-[#f8f8f8] flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#303030] mx-auto"></div>
          <p className="text-gray-600 mt-4">–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É...</p>
        </div>
      </div>
    );
  }

  const totalQuantity = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = cartItems.reduce((sum, item) => sum + item.totalPrice, 0);

  return (
    <div className="min-h-screen bg-[#f8f8f8]">
      {/* –°–∫—Ä—ã—Ç—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML –¥–ª—è PDF */}
      {isMounted && ProposalComponent}

      {/* –•—ç–¥–µ—Ä */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-md mx-auto px-4 py-4">
          <div className="flex items-center gap-4">
            <button 
              onClick={() => router.back()}
              className="p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <svg className="w-6 h-6 text-[#303030]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <div className="flex-1 text-center">
              <Image
                src="/TLlogo.svg"
                alt="TL Logo"
                width={120}
                height={40}
                className="h-10 w-auto mx-auto"
              />
            </div>
            <button 
              onClick={() => {
                // TODO: –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
                alert('–ü—Ä–æ—Ñ–∏–ª—å - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
              }}
              className="p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <Image
                src="/bx_user.svg"
                alt="–ü—Ä–æ—Ñ–∏–ª—å"
                width={24}
                height={24}
                className="w-6 h-6"
              />
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-md mx-auto p-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã */}
        <div className="mb-6">
          <h1 className="text-2xl font-bold text-[#303030] mb-2">–ö–æ—Ä–∑–∏–Ω–∞</h1>
          {cartItems.length > 0 && (
            <p className="text-gray-600 text-sm">
              {getTotalItems()} —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—É–º–º—É {getTotalAmount().toLocaleString('ru-RU')}‚ÇΩ
            </p>
          )}
        </div>

        {cartItems.length === 0 ? (
          // –ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞
          <div className="bg-white rounded-lg p-8 text-center shadow-sm">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <Image
                src="/teenyicons_bag-outline.svg"
                alt="–ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞"
                width={32}
                height={32}
                className="w-8 h-8 text-gray-400"
              />
            </div>
            <h3 className="text-lg font-semibold text-[#303030] mb-2">
              –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
            </h3>
            <p className="text-gray-600 mb-6">
              –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            </p>
            <Link
              href="/catalog"
              className="inline-block px-6 py-3 bg-[#303030] text-white rounded-lg font-medium hover:bg-[#404040] transition-colors"
            >
              –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
            </Link>
          </div>
        ) : (
          <>
            {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
            <div className="space-y-4 mb-6">
              {cartItems.map((item) => {
                const categorizedOptions = getOptionsByCategory(item);
                const optionsPrice = getOptionsPrice(item);
                const unitPrice = computeUnitPrice(item, item.quantity);
                const lineTotal = unitPrice * item.quantity;
                const baseUnitPrice = getTierBasePrice(item.productSlug, item.quantity, item.basePrice);
                const printEnabled = (item.optionsDetails || []).some(d => d.category === 'print');
                const designEnabled = (item.optionsDetails || []).some(d => d.category === 'design');
                const hasLabels = (categorizedOptions.label?.length || 0) > 0;
                const hasPackaging = (categorizedOptions.packaging?.length || 0) > 0;

                return (
                  <div key={item.id} className="bg-white rounded-lg p-4 shadow-sm">
                    {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
                    <div className="flex gap-3 mb-4">
                      <div className="w-16 h-16 bg-gray-100 rounded-lg flex-shrink-0 flex items-center justify-center">
                        {item.image ? (
                          <Image
                            src={item.image}
                            alt={item.productName}
                            width={64}
                            height={64}
                            className="w-full h-full object-cover rounded-lg"
                          />
                        ) : (
                          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        )}
                      </div>
                      
                      <div className="flex-1">
                        <h3 className="font-semibold text-[#303030] mb-1">{item.productName}</h3>
                        <p className="text-sm text-gray-600 mb-2">
                          –ê—Ä—Ç–∏–∫—É–ª: {item.productSlug.toUpperCase()}
                        </p>
                        
                        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
                        <div className="flex items-center gap-3">
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => updateQuantity(item.id, item.quantity - 1)}
                              disabled={item.quantity <= 10}
                              className="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:border-[#303030] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
                              </svg>
                            </button>
                            
                            <span className="font-medium text-[#303030] min-w-[2rem] text-center">
                              {item.quantity}
                            </span>
                            
                            <button
                              onClick={() => updateQuantity(item.id, item.quantity + 1)}
                              className="w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:border-[#303030] transition-colors"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                              </svg>
                            </button>
                          </div>
                          
                          <button
                            onClick={() => removeFromCart(item.id)}
                            className="ml-auto p-1 text-red-500 hover:text-red-700 transition-colors"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ¬´–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ö–ü¬ª */}
                    <div className="border-t border-gray-100 pt-3 mt-2">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-[#303030]">–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ö–ü</span>
                        <button
                          type="button"
                          onClick={() => setConfigExpanded(prev => ({ ...prev, [item.id]: !prev[item.id] }))}
                          className={`group w-10 h-6 rounded-full relative transition-colors duration-200 ease-out ${configExpanded[item.id] ? 'bg-green-500' : 'bg-gray-300'}`}
                          role="switch"
                          aria-checked={!!configExpanded[item.id]}
                           aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
                        >
                          <span className={`absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full shadow-md transition-transform duration-200 ease-out ${configExpanded[item.id] ? 'translate-x-4' : ''} group-active:scale-95`} />
                        </button>
                      </div>
                    </div>

                    {configExpanded[item.id] && (
                      <>
                        {/* –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ */}
                        <div className="space-y-3 border-t border-gray-100 pt-4 mt-3">
                          <h4 className="text-sm font-medium text-gray-700">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞</h4>
                          {/* –¶–≤–µ—Ç ‚Äî —Å–∫—Ä—ã—Ç */}
                          {/* –î–∏–∑–∞–π–Ω */}
                          <div className="w-full flex justify-between items-center text-sm py-2 px-2 rounded">
                            <span className="text-gray-600">–î–∏–∑–∞–π–Ω</span>
                            <div className="flex items-center gap-3">
                              <span className="text-xs text-gray-500">
                                {designEnabled ? '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ' : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}
                              </span>
                              <button
                                type="button"
                                onClick={() => toggleDesign(item.id, !designEnabled)}
                                className={`group w-10 h-6 rounded-full relative transition-colors duration-200 ease-out ${designEnabled ? 'bg-green-500' : 'bg-gray-300'}`}
                                role="switch"
                                aria-checked={designEnabled}
                                 aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–∏–∑–∞–π–Ω"
                               >
                                <span className={`absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full shadow-md transition-transform duration-200 ease-out ${designEnabled ? 'translate-x-4' : ''} group-active:scale-95`} />
                               </button>
                            </div>
                          </div>
                          {/* –ü—Ä–∏–Ω—Ç */}
                          <div className="w-full flex justify-between items-center text-sm py-2 px-2 rounded">
                            <span className="text-gray-600">–ü—Ä–∏–Ω—Ç</span>
                            <div className="flex items-center gap-3">
                              <span className="text-xs text-gray-500">
                                {printEnabled ? `+${PRINT_FLAT_PRICE.toLocaleString('ru-RU')}‚ÇΩ` : '–ë–µ–∑ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è'}
                              </span>
                              <button
                                type="button"
                                onClick={() => togglePrint(item.id, !printEnabled)}
                                className={`group w-10 h-6 rounded-full relative transition-colors duration-200 ease-out ${printEnabled ? 'bg-green-500' : 'bg-gray-300'}`}
                                role="switch"
                                aria-checked={printEnabled}
                                 aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–Ω—Ç"
                               >
                                <span className={`absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full shadow-md transition-transform duration-200 ease-out ${printEnabled ? 'translate-x-4' : ''} group-active:scale-95`} />
                               </button>
                            </div>
                          </div>
                          {/* –ë–∏—Ä–∫–∏ (–º–æ–¥–∞–ª–∫–∞) */}
                          <button
                            type="button"
                            onClick={() => openOptionsModal(item.id, 'label')}
                            className="w-full flex items-center justify-between text-sm py-2.5 px-3 rounded-md border border-gray-200 hover:bg-gray-50 active:bg-gray-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-300 cursor-pointer"
                            aria-haspopup="dialog"
                            aria-label="–û—Ç–∫—Ä—ã—Ç—å –æ–ø—Ü–∏–∏ ¬´–ë–∏—Ä–∫–∏¬ª"
                          >
                            <span className="text-gray-600">–ë–∏—Ä–∫–∏</span>
                            <span className="flex items-center gap-2">
                              <span className={`${hasLabels ? 'font-medium text-[#303030]' : 'text-gray-500'} text-right`}>
                                {hasLabels ? categorizedOptions.label.join(', ') : '–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'}
                              </span>
                              <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                              </svg>
                            </span>
                          </button>
                           {/* –£–ø–∞–∫–æ–≤–∫–∞ */}
                          <button
                            type="button"
                            onClick={() => openOptionsModal(item.id, 'packaging')}
                            className="w-full flex items-center justify-between text-sm py-2.5 px-3 rounded-md border border-gray-200 hover:bg-gray-50 active:bg-gray-100 focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-300 cursor-pointer"
                            aria-haspopup="dialog"
                            aria-label="–û—Ç–∫—Ä—ã—Ç—å –æ–ø—Ü–∏–∏ ¬´–£–ø–∞–∫–æ–≤–∫–∞¬ª"
                          >
                            <span className="text-gray-600">–£–ø–∞–∫–æ–≤–∫–∞</span>
                            <span className="flex items-center gap-2">
                              <span className={`${hasPackaging ? 'font-medium text-[#303030]' : 'text-gray-500'} text-right`}>
                                {hasPackaging ? categorizedOptions.packaging.join(', ') : '–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏'}
                              </span>
                              <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                              </svg>
                            </span>
                          </button>
                        </div>

                        {/* –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ */}
                        <div className="space-y-2 border-t border-gray-100 pt-4 mt-4">
                          <h4 className="text-sm font-medium text-gray-700">–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</h4>
                          <div className="flex justify-between items-center text-sm">
                            <span className="text-gray-600">–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</span>
                            <span className="font-medium">{baseUnitPrice.toLocaleString('ru-RU')}‚ÇΩ</span>
                          </div>
                          {optionsPrice > 0 && (
                            <div className="flex justify-between items-center text-sm">
                              <span className="text-gray-600">–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–ø—Ü–∏–∏:</span>
                              <span className="font-medium">+{optionsPrice.toLocaleString('ru-RU')}‚ÇΩ</span>
                            </div>
                          )}
                          <div className="flex justify-between items-center text-sm border-t border-gray-100 pt-2">
                            <span className="text-gray-600">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</span>
                            <span className="font-semibold text-[#303030]">{unitPrice.toLocaleString('ru-RU')}‚ÇΩ</span>
                          </div>
                          <div className="flex justify-between items-center text-sm">
                            <span className="text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</span>
                            <span className="font-medium">{item.quantity} —à—Ç</span>
                          </div>
                          <div className="flex justify-between items-center text-base border-t border-gray-300 pt-2">
                            <span className="font-semibold text-gray-700">–ò—Ç–æ–≥–æ –∑–∞ —Ç–æ–≤–∞—Ä:</span>
                            <span className="font-bold text-[#303030] text-lg">{lineTotal.toLocaleString('ru-RU')}‚ÇΩ</span>
                          </div>
                        </div>
                      </>
                    )}
                  </div>
                );
              })}
            </div>

            {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ */}
            <div className="bg-white rounded-lg p-4 shadow-sm mb-6">
              <h3 className="text-lg font-semibold text-[#303030] mb-4">–ò—Ç–æ–≥–æ –ø–æ –∑–∞–∫–∞–∑—É</h3>
              
              <div className="space-y-2">
                <div className="flex justify-between items-center text-sm">
                  <span className="text-gray-600">–¢–æ–≤–∞—Ä—ã ({getTotalItems()} —à—Ç):</span>
                  <span className="font-medium">{getTotalAmount().toLocaleString('ru-RU')}‚ÇΩ</span>
                </div>
                
                <div className="border-t border-gray-200 pt-3 mt-3">
                  <div className="flex justify-between items-center">
                    <span className="text-lg font-semibold text-gray-700">–ö –æ–ø–ª–∞—Ç–µ:</span>
                    <span className="text-2xl font-bold text-[#303030]">
                      {getTotalAmount().toLocaleString('ru-RU')}‚ÇΩ
                    </span>
                  </div>
                </div>
              </div>

              {/* –°—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
              {userData && (
                <div className="mt-4 pt-3 border-t border-gray-100">
                  <div className="flex items-center gap-2 text-sm text-green-600">
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    <span>–î–∞–Ω–Ω—ã–µ –¥–ª—è –ö–ü –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è</span>
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    {userData.companyName && `${userData.companyName} ‚Ä¢ `}
                    {userData.firstName} {userData.lastName}
                  </p>
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="space-y-3">
              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram */}
              <button
                onClick={() => {
                  console.log('üöÄ –ö–ù–û–ü–ö–ê –ù–ê–ñ–ê–¢–ê! –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ö–ü');
                  console.log('üìã userData:', userData);
                  handleSendProposal();
                }}
                disabled={isSending}
                className={`w-full py-3 rounded-lg font-medium transition-colors flex items-center justify-center gap-2 border ${
                  isSending
                    ? 'bg-gray-100 text-gray-400 border-gray-200 cursor-not-allowed' 
                    : 'bg-white text-[#303030] border-gray-300 hover:bg-gray-50 active:bg-gray-100'
                }`}
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.894 8.221l-1.97 9.28c-.145.658-.537.818-1.084.508l-3-2.21-1.446 1.394c-.14.18-.357.295-.6.295-.002 0-.003 0-.005 0l.213-3.054 5.56-5.022c.24-.213-.054-.334-.373-.121L9.864 13.63l-2.915-.918c-.636-.194-.648-.636.137-.942L17.926 7.08c.529-.194.99.123.824.73-.001.006-.002.012-.003.018z"/>
                </svg>
                {isSending 
                  ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...' 
                  : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ö–ü –≤ Telegram'
                }
              </button>
            </div>
          </>
        )}
      </div>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã */}
      {deletedItem && (
        <div className="fixed bottom-4 left-4 right-4 z-40 max-w-md mx-auto">
          <div className="bg-gray-800 text-white rounded-lg p-4 shadow-2xl">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <p className="text-sm font-medium">
                  –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                </p>
                <p className="text-xs text-gray-300 mt-1">
                  {deletedItem.productName}
                </p>
                
                <button
                  onClick={undoDelete}
                  className="bg-blue-500 text-white px-3 py-1.5 rounded-md text-sm font-medium hover:bg-blue-600 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∏—Ç—å
                </button>
                
                <button
                  onClick={() => {
                    setDeletedItem(null);
                    setUndoTimer(null);
                    setTimeLeft(10);
                  }}
                  className="p-1 text-gray-400 hover:text-white transition-colors"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="mt-3 w-full bg-gray-700 rounded-full h-1">
              <div 
                className="bg-blue-500 h-1 rounded-full transition-all duration-1000 ease-linear"
                style={{ width: `${(timeLeft / 10) * 100}%` }}
              />
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {showUserDataForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 pb-[env(safe-area-inset-bottom)] pt-[env(safe-area-inset-top)] overscroll-contain">
          <div className="bg-white rounded-lg shadow-2xl w-full max-w-md max-h-[90dvh] overflow-y-auto">
            <UserDataForm
              onSubmit={handleFormSubmit}
              onCancel={() => setShowUserDataForm(false)}
              initialData={userData || {}}
            />
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π */}
      {optionsModal.itemId && optionsModal.category && (
        <div className="fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4 pb-[env(safe-area-inset-bottom)] pt-[env(safe-area-inset-top)] overscroll-contain" onClick={closeOptionsModal}>
          <div className="bg-white rounded-lg w-full max-w-md p-4 shadow-2xl max-h-[90dvh] overflow-hidden flex flex-col" onClick={(e) => e.stopPropagation()}>
            <h3 className="text-base font-semibold text-[#303030] mb-3">
              {optionsModal.category === 'design' && '–î–∏–∑–∞–π–Ω'}
              {optionsModal.category === 'print' && '–ü—Ä–∏–Ω—Ç'}
              {optionsModal.category === 'label' && '–ë–∏—Ä–∫–∏'}
              {optionsModal.category === 'packaging' && '–£–ø–∞–∫–æ–≤–∫–∞'}
            </h3>
            {(() => {
              const item = cartItems.find(i => i.id === optionsModal.itemId)!;
              const slugKey = (item.productSlug || '').toLowerCase();
              const list = (productsBySlug[slugKey]?.optionsByCategory?.[optionsModal.category!] || []).filter(o => o.isActive);
              const isSingle = optionsModal.category === 'design';
              return (
                <div className="flex-1 min-h-0 overflow-y-auto">
                  <div className="space-y-2 pr-1">
                    {list.map(opt => {
                      const checked = modalSelected.includes(opt.id);
                      return (
                        <label key={opt.id} className={`flex items-center justify-between gap-3 p-2 rounded-md border ${checked ? 'border-green-300 bg-green-50' : 'border-gray-200 hover:bg-gray-50'}`}>
                          <div className="flex flex-col">
                            <span className="text-sm font-medium text-[#303030]">{opt.name}</span>
                            <span className="text-xs text-gray-500">{opt.price > 0 ? `+${opt.price.toLocaleString('ru-RU')}‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</span>
                          </div>
                          <input
                            type={isSingle ? 'radio' : 'checkbox'}
                            name={`opt-${optionsModal.category}`}
                            checked={checked}
                            onChange={() => toggleModalOption(opt.id)}
                            className="w-5 h-5"
                          />
                        </label>
                      );
                    })}
                    {list.length === 0 && (
                      <p className="text-sm text-gray-500">–û–ø—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
                    )}
                  </div>
                </div>
              );
            })()}
            <div className="mt-4 flex gap-2">
              <button onClick={saveModalOptions} className="flex-1 py-2 bg-[#303030] text-white rounded-md hover:bg-[#404040]">–ì–æ—Ç–æ–≤–æ</button>
              <button onClick={closeOptionsModal} className="flex-1 py-2 bg-gray-100 text-[#303030] rounded-md hover:bg-gray-200">–û—Ç–º–µ–Ω–∞</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
