import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';
import { prisma } from '../lib/prisma';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function upsertUser(ctx: any) {
  const user = ctx.from;
  if (!user) return null;

  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
  if (process.env.NODE_ENV !== 'production') {
    return {
      id: 1,
      telegramId: BigInt(user.id),
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
      language: user.language_code || 'ru',
      isPremium: user.is_premium || false,
      isBot: user.is_bot || false,
      createdAt: new Date(),
      updatedAt: new Date()
    };
  }

  try {
    const dbUser = await prisma.user.upsert({
      where: { telegramId: BigInt(user.id) },
      update: {
        username: user.username,
        firstName: user.first_name,
        lastName: user.last_name,
        language: user.language_code || 'ru',
        isPremium: user.is_premium || false,
        updatedAt: new Date()
      },
      create: {
        telegramId: BigInt(user.id),
        username: user.username,
        firstName: user.first_name,
        lastName: user.last_name,
        language: user.language_code || 'ru',
        isPremium: user.is_premium || false,
        isBot: user.is_bot || false
      }
    });

    return dbUser;
  } catch (error) {
    console.error('Error upserting user:', error);
    return null;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const user = await upsertUser(ctx);
  const firstName = user?.firstName || ctx.from?.first_name || '–¥—Ä—É–≥';
  const webAppUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3001';
  
  ctx.reply(
    `–ô–æ—É, –ø—Ä–∏–≤–µ—Ç, ${firstName}! ü§ò –≠—Ç–æ –±–æ—Ç Total Lookas!\n\n` +
    `–ú—ã —Å–æ–∑–¥–∞–ª–∏ —ç—Ç–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ª–µ–≥–∫–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞—à—É –∫—Ä—É—Ç—É—é –æ–¥–µ–∂–¥—É –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. ` +
    `–ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –≤—Å–µ –Ω–∞—à–∏ —Å–≤–µ–∂–∏–µ –¥—Ä–æ–ø—ã, —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤—Å–µ–≥–æ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.\n\n` +
    `–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ –Ω–∞—á–∞—Ç—å —à–æ–ø–ø–∏–Ω–≥! üëá`,
    {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üî• –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: webAppUrl }
          }
        ]]
      }
    }
  );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot.on('text', async (ctx) => {
  const user = await upsertUser(ctx);
  const webAppUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3001';
  
  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
  if (process.env.NODE_ENV !== 'production') {
    console.log(`[DEV] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user?.firstName || ctx.from?.first_name}: ${ctx.message.text}`);
  }
  
  // –û—Ç–≤–µ—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞—à—É –æ–¥–µ–∂–¥—É, –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: üëá`,
    {
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üî• –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: webAppUrl }
          }
        ]]
      }
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  const user = await upsertUser(ctx);
  if (!user) return;

  const data = ctx.webAppData?.data?.text() || '{}';
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', data);
  
  try {
    const parsedData = JSON.parse(data);
    
    // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    if (process.env.NODE_ENV !== 'production') {
      console.log(`[DEV] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`, parsedData);
    } else {
      // –í production —Ä–µ–∂–∏–º–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      try {
        await prisma.webAppData.create({
          data: {
            userId: user.id,
            data: parsedData
          }
        });

        await prisma.message.create({
          data: {
            userId: user.id,
            content: `–î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${parsedData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
            type: 'WEBAPP_DATA'
          }
        });
      } catch (error) {
        console.error('Error saving webapp data:', error);
      }
    }

    // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    ctx.reply(
      `‚úÖ –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ–π –∑–∞–∫–∞–∑!\n\n` +
      `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ Total Lookas. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.`
    );
  } catch (error) {
    console.error('Error processing webapp data:', error);
    ctx.reply('‚ùå –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
export async function startBot() {
  try {
    if (process.env.NODE_ENV !== 'production') {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Long Polling —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      bot.catch((err, ctx) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram:', err);
      });
      
      await bot.launch();
      console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!');
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      process.once('SIGINT', () => bot.stop('SIGINT'));
      process.once('SIGTERM', () => bot.stop('SIGTERM'));
    } else {
      // –í production —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
      await bot.telegram.getMe();
      console.log('Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook –∑–∞–ø—Ä–æ—Å–æ–≤!');
    }
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    return false;
  }
}

export default bot;
