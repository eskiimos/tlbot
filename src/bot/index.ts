import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';
import { prisma } from '../lib/prisma';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function upsertUser(ctx: any) {
  const user = ctx.from;
  if (!user) return null;

  try {
    const dbUser = await prisma.user.upsert({
      where: { telegramId: BigInt(user.id) },
      update: {
        username: user.username,
        firstName: user.first_name,
        lastName: user.last_name,
        language: user.language_code || 'ru',
        isPremium: user.is_premium || false,
        updatedAt: new Date()
      },
      create: {
        telegramId: BigInt(user.id),
        username: user.username,
        firstName: user.first_name,
        lastName: user.last_name,
        language: user.language_code || 'ru',
        isPremium: user.is_premium || false,
        isBot: user.is_bot || false
      }
    });

    return dbUser;
  } catch (error) {
    console.error('Error upserting user:', error);
    return null;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const user = await upsertUser(ctx);
  const firstName = user?.firstName || ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  ctx.reply(
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${firstName}! üëã\n\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webapp –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n` +
    `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /webapp - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot.command('webapp', async (ctx) => {
  const user = await upsertUser(ctx);
  const webAppUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3001';
  
  ctx.reply('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: webAppUrl }
        }
      ]]
    }
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
bot.command('stats', async (ctx) => {
  try {
    const user = await upsertUser(ctx);
    if (!user) {
      ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const messageCount = await prisma.message.count({
      where: { userId: user.id }
    });

    const webappDataCount = await prisma.webAppData.count({
      where: { userId: user.id }
    });

    const totalUsers = await prisma.user.count();

    ctx.reply(
      `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
      `üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}\n` +
      `üì± –î–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${webappDataCount}\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}\n` +
      `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt.toLocaleDateString('ru-RU')}`
    );
  } catch (error) {
    console.error('Error getting stats:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const user = await upsertUser(ctx);
  if (!user) return;

  try {
    await prisma.message.create({
      data: {
        userId: user.id,
        content: ctx.message.text,
        type: 'TEXT',
        telegramId: BigInt(ctx.message.message_id)
      }
    });
  } catch (error) {
    console.error('Error saving message:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  const user = await upsertUser(ctx);
  if (!user) return;

  const data = ctx.webAppData?.data?.text() || '{}';
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', data);
  
  try {
    const parsedData = JSON.parse(data);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –±–∞–∑—É
    await prisma.webAppData.create({
      data: {
        userId: user.id,
        data: parsedData
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await prisma.message.create({
      data: {
        userId: user.id,
        content: `–î–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${parsedData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
        type: 'WEBAPP_DATA'
      }
    });

    ctx.reply(
      `‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n` +
      `üì± –°–æ–æ–±—â–µ–Ω–∏–µ: ${parsedData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date(parsedData.timestamp || Date.now()).toLocaleString('ru-RU')}`
    );
  } catch (error) {
    console.error('Error processing webapp data:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
export async function startBot() {
  try {
    if (process.env.NODE_ENV !== 'production') {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Long Polling —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      await bot.launch();
      console.log('Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!');
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      process.once('SIGINT', () => bot.stop('SIGINT'));
      process.once('SIGTERM', () => bot.stop('SIGTERM'));
    } else {
      // –í production —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
      await bot.telegram.getMe();
      console.log('Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook –∑–∞–ø—Ä–æ—Å–æ–≤!');
    }
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    return false;
  }
}

export default bot;
