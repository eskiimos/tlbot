"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = POST;
const server_1 = require("next/server");
const telegraf_1 = require("telegraf");
const telegraf_2 = require("telegraf");
const generateProposalHTML_1 = require("@/lib/generateProposalHTML");
async function POST(request) {
    console.log('üöÄ API /api/proposals –≤—ã–∑–≤–∞–Ω');
    console.log('üìç Environment:', process.env.NODE_ENV);
    console.log('üîë Bot token exists:', Boolean(process.env.TELEGRAM_BOT_TOKEN));
    let telegramId = null;
    let orderData = null;
    try {
        const formData = await request.formData();
        telegramId = formData.get('telegramId');
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–æ—Ä–º—ã
        const orderDataString = formData.get('orderData');
        if (orderDataString) {
            try {
                orderData = JSON.parse(orderDataString);
                console.log('üì¶ Order data parsed successfully');
            }
            catch (jsonError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ orderData JSON:', jsonError);
                return server_1.NextResponse.json({ error: 'Invalid order data format' }, { status: 400 });
            }
        }
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ö–ü:', {
            telegramId: telegramId,
            hasOrderData: Boolean(orderData)
        });
        if (!telegramId || !orderData) {
            return server_1.NextResponse.json({ error: 'Missing telegram ID or order data' }, { status: 400 });
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        if (!botToken) {
            console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return server_1.NextResponse.json({ error: 'Bot configuration missing' }, { status: 500 });
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if (telegramId === '123456789' && process.env.NODE_ENV === 'development') {
            console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram');
            return server_1.NextResponse.json({
                message: 'Test mode: proposal generated successfully',
                mode: 'development'
            }, { status: 200 });
        }
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç
        const bot = new telegraf_1.Telegraf(botToken);
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ö–ü —á–µ—Ä–µ–∑ –±–æ—Ç–∞...');
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –ö–ü:', {
                detailedProposal: orderData.detailedProposal,
                items: orderData.items?.length,
                customer: orderData.customerName
            });
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
            const htmlContent = (0, generateProposalHTML_1.generateProposalHTML)({
                orderData,
                cartItems: (orderData.items || []).map((item) => ({
                    ...item,
                    // detailedProposal –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                    detailedProposal: item.detailedProposal || false
                })),
                userData: {
                    telegramId: telegramId,
                    firstName: orderData.customerName,
                    email: orderData.customerEmail,
                    companyName: orderData.companyName
                }
            });
            // –°–æ–∑–¥–∞–µ–º Buffer –∏–∑ HTML —Å—Ç—Ä–æ–∫–∏
            const htmlBuffer = Buffer.from(htmlContent, 'utf-8');
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            const fileName = `–ö–ü_${orderData?.customerName?.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '_') || 'Total_Lookas'}_${new Date().toLocaleDateString('ru-RU').replace(/\./g, '_')}.html`;
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            const sentMessage = await bot.telegram.sendDocument(telegramId, telegraf_2.Input.fromBuffer(htmlBuffer, fileName), {
                caption: `üéâ –í–∞—à–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n` +
                    `üìã –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n\n` +
                    `üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è? –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏!\n\n` +
                    `üöÄ Total Lookas ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—á –≤ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç—ã!`
            });
            console.log('‚úÖ HTML –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            return server_1.NextResponse.json({
                message: 'HTML proposal sent successfully to Telegram',
                messageId: sentMessage.message_id
            }, { status: 200 });
        }
        catch (telegramError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Telegram:', telegramError);
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ Telegram
            const errorMessage = telegramError.message || 'Unknown Telegram error';
            if (errorMessage.includes('chat not found')) {
                return server_1.NextResponse.json({
                    error: '–ß–∞—Ç —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    details: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start'
                }, { status: 400 });
            }
            return server_1.NextResponse.json({
                error: 'Telegram API error',
                details: errorMessage
            }, { status: 500 });
        }
    }
    catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
        return server_1.NextResponse.json({
            error: 'Internal server error',
            details: error.message || 'Unknown error'
        }, { status: 500 });
    }
}
