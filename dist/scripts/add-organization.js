"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("@prisma/client");
const prisma = new client_1.PrismaClient();
async function addOrganizationToUser() {
    try {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await prisma.user.findUnique({
            where: { telegramId: BigInt(123456789) }
        });
        if (!user) {
            console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.firstName, user.lastName);
        // –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const organization = await prisma.organization.create({
            data: {
                contactName: '–û–û–û "–¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è"',
                inn: '1234567890',
                phone: '+7 (999) 123-45-67',
                email: 'test@company.ru',
                userId: user.id
            }
        });
        console.log('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', organization);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const updatedUser = await prisma.user.findUnique({
            where: { telegramId: BigInt(123456789) },
            include: { organization: true }
        });
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
            telegramId: updatedUser.telegramId.toString(),
            firstName: updatedUser.firstName,
            lastName: updatedUser.lastName,
            username: updatedUser.username
        });
        console.log('üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', updatedUser.organization);
    }
    catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    finally {
        await prisma.$disconnect();
    }
}
addOrganizationToUser();
