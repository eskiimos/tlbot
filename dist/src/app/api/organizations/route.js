"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.POST = POST;
exports.GET = GET;
const server_1 = require("next/server");
const prisma_1 = require("@/lib/prisma");
async function POST(request) {
    console.log('üöÄ POST /api/organizations - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    try {
        const body = await request.json();
        console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', body);
        const { contactName, inn, phone, email, user } = body;
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!contactName || !inn || !phone || !user?.id) {
            console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', { contactName, inn, phone, userId: user?.id });
            return server_1.NextResponse.json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' }, { status: 400 });
        }
        console.log('–°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = await prisma_1.prisma.user.upsert({
            where: { telegramId: BigInt(user.id) },
            update: {
                username: user.username,
                firstName: user.first_name,
                lastName: user.last_name || null,
            },
            create: {
                telegramId: BigInt(user.id),
                username: user.username,
                firstName: user.first_name,
                lastName: user.last_name || null,
            }
        });
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', existingUser.id);
        console.log('–°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...');
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        const organization = await prisma_1.prisma.organization.upsert({
            where: { userId: existingUser.id },
            update: {
                contactName,
                inn,
                phone,
                email: email || null,
            },
            create: {
                contactName,
                inn,
                phone,
                email: email || null,
                userId: existingUser.id,
            }
        });
        console.log('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞:', organization.id);
        return server_1.NextResponse.json({
            success: true,
            organization: {
                id: organization.id,
                contactName: organization.contactName,
                inn: organization.inn,
                phone: organization.phone,
                email: organization.email,
                createdAt: organization.createdAt.toISOString(),
                updatedAt: organization.updatedAt.toISOString(),
            }
        });
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return server_1.NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
}
async function GET(request) {
    console.log('üîç GET /api/organizations - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω');
    try {
        const { searchParams } = new URL(request.url);
        const telegramId = searchParams.get('telegramId');
        console.log('üì± –ò—â–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è telegramId:', telegramId);
        if (!telegramId) {
            return server_1.NextResponse.json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegramId' }, { status: 400 });
        }
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        const user = await prisma_1.prisma.user.findUnique({
            where: { telegramId: BigInt(telegramId) },
            include: { organization: true }
        });
        if (!user || !user.organization) {
            return server_1.NextResponse.json({ organization: null }, { status: 200 });
        }
        return server_1.NextResponse.json({
            organization: {
                id: user.organization.id,
                contactName: user.organization.contactName,
                inn: user.organization.inn,
                phone: user.organization.phone,
                email: user.organization.email,
                createdAt: user.organization.createdAt.toISOString(),
                updatedAt: user.organization.updatedAt.toISOString(),
            }
        });
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return server_1.NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
}
