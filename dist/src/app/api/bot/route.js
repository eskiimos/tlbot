"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GET = GET;
exports.POST = POST;
const server_1 = require("next/server");
const telegraf_1 = require("telegraf");
const prisma_1 = require("../../../lib/prisma");
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new telegraf_1.Telegraf(process.env.TELEGRAM_BOT_TOKEN);
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function upsertUser(telegramUser) {
    const userDataForDb = {
        telegramId: telegramUser.id.toString(),
        username: telegramUser.username || null,
        firstName: telegramUser.first_name || null,
        lastName: telegramUser.last_name || null,
        languageCode: telegramUser.language_code || null,
    };
    const user = await prisma_1.prisma.user.upsert({
        where: { telegramId: userDataForDb.telegramId },
        update: userDataForDb,
        create: userDataForDb,
    });
    return user;
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.start(async (ctx) => {
    try {
        console.log('Bot /start command received');
        const user = await upsertUser(ctx.from);
        console.log('User upserted:', user.id);
        const welcome = `–ü—Ä–∏–≤–µ—Ç! üëã
    
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TL Bot! 
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:

üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
üì± –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: `${process.env.NEXT_PUBLIC_APP_URL}` } }],
                [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'contact' }],
                [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }]
            ]
        };
        await ctx.reply(welcome, { reply_markup: keyboard });
        console.log('Reply sent successfully');
    }
    catch (error) {
        console.error('Error in start command:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});
bot.command('webapp', async (ctx) => {
    try {
        console.log('Bot /webapp command received');
        const user = await upsertUser(ctx.from);
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ TL', web_app: { url: `${process.env.NEXT_PUBLIC_APP_URL}` } }]
            ]
        };
        await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:', { reply_markup: keyboard });
        console.log('Webapp reply sent successfully');
    }
    catch (error) {
        console.error('Error in webapp command:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});
bot.action('contact', async (ctx) => {
    try {
        console.log('Contact action received');
        await ctx.answerCbQuery();
        await ctx.reply('üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\nüìß Email: info@tl-clothing.com\nüì± Telegram: @tl_support\nüåê –°–∞–π—Ç: tl-clothing.com');
    }
    catch (error) {
        console.error('Error in contact action:', error);
    }
});
bot.action('about', async (ctx) => {
    try {
        console.log('About action received');
        await ctx.answerCbQuery();
        await ctx.reply('‚ÑπÔ∏è –û TL Clothing:\n\n–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã. –ù–∞—à–∞ –º–∏—Å—Å–∏—è - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∏ —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º.\n\nüéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É\n‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\nüíØ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞');
    }
    catch (error) {
        console.error('Error in about action:', error);
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
bot.on('web_app_data', async (ctx) => {
    try {
        console.log('Web app data received');
        const user = await upsertUser(ctx.from);
        const webAppData = ctx.webAppData?.data;
        if (webAppData) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            await prisma_1.prisma.webAppData.create({
                data: {
                    userId: user.id,
                    data: JSON.parse(webAppData.text()),
                },
            });
            await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
            console.log('Web app data processed successfully');
        }
    }
    catch (error) {
        console.error('Error processing web app data:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});
// GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async function GET() {
    console.log('GET /api/bot - Bot webhook endpoint is active');
    return server_1.NextResponse.json({
        message: 'Telegram bot webhook endpoint is active',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV
    });
}
// POST endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook
async function POST(request) {
    try {
        console.log('POST /api/bot - Webhook received');
        const body = await request.json();
        console.log('Webhook body:', JSON.stringify(body, null, 2));
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (–±–∞–∑–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        if (!process.env.TELEGRAM_BOT_TOKEN) {
            console.error('TELEGRAM_BOT_TOKEN not configured');
            return server_1.NextResponse.json({ error: 'Bot not configured' }, { status: 500 });
        }
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        await bot.handleUpdate(body);
        console.log('Webhook processed successfully');
        return server_1.NextResponse.json({ ok: true });
    }
    catch (error) {
        console.error('Error processing webhook:', error);
        return server_1.NextResponse.json({
            error: 'Internal server error',
            details: error instanceof Error ? error.message : 'Unknown error'
        }, { status: 500 });
    }
}
