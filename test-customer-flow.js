const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testCustomerFlow() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞...\n');

  // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –∫–ª–∏–µ–Ω—Ç–∞
  const customerData = {
    firstName: '–ò–≤–∞–Ω',
    lastName: '–ü–µ—Ç—Ä–æ–≤',
    email: 'ivan.petrov@example.com',
    phoneNumber: '+7 (999) 123-45-67',
    companyName: '–û–û–û "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"',
    inn: '1234567890',
    telegramId: '123456789'
  };

  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const cartItems = [
    {
      id: 'test-product-1',
      name: '–§—É—Ç–±–æ–ª–∫–∞',
      basePrice: 1000,
      quantity: 2,
      selectedOptions: {
        color: '–ß–µ—Ä–Ω—ã–π',
        size: 'M'
      },
      optionsDetails: [
        { name: '–¶–≤–µ—Ç', value: '–ß–µ—Ä–Ω—ã–π', priceModifier: 0 },
        { name: '–†–∞–∑–º–µ—Ä', value: 'M', priceModifier: 0 }
      ],
      totalPrice: 2000
    },
    {
      id: 'test-product-2',
      name: '–•—É–¥–∏',
      basePrice: 3000,
      quantity: 1,
      selectedOptions: {
        color: '–ë–µ–ª—ã–π',
        size: 'L'
      },
      optionsDetails: [
        { name: '–¶–≤–µ—Ç', value: '–ë–µ–ª—ã–π', priceModifier: 100 },
        { name: '–†–∞–∑–º–µ—Ä', value: 'L', priceModifier: 200 }
      ],
      totalPrice: 3300
    }
  ];

  // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ orderData –∫–∞–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ cart
  const orderData = {
    userId: customerData.telegramId,
    customerName: `${customerData.firstName || ''} ${customerData.lastName || ''}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    customerEmail: customerData.email,
    customerPhone: customerData.phoneNumber,
    customerCompany: customerData.companyName,
    customerInn: customerData.inn,
    items: cartItems,
    totalAmount: 5300 * 100 // –í –∫–æ–ø–µ–π–∫–∞—Ö
  };

  console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:');
  console.log(JSON.stringify(orderData, null, 2));

  try {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const order = await prisma.order.create({
      data: {
        userId: orderData.userId.toString(),
        telegramId: orderData.userId.toString(),
        customerName: orderData.customerName,
        customerEmail: orderData.customerEmail || '',
        customerPhone: orderData.customerPhone || '',
        customerCompany: orderData.customerCompany || '',
        customerInn: orderData.customerInn || '',
        totalAmount: orderData.totalAmount,
        items: orderData.items,
        status: 'NEW'
      }
    });

    console.log('\n‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:');
    console.log({
      id: order.id,
      customerName: order.customerName,
      customerEmail: order.customerEmail,
      customerPhone: order.customerPhone,
      customerCompany: order.customerCompany,
      customerInn: order.customerInn,
      totalAmount: order.totalAmount,
      status: order.status,
      itemsCount: order.items.length
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –∑–∞–∫–∞–∑ –≤—ã–≥–ª—è–¥–∏—Ç –≤ –∞–¥–º–∏–Ω–∫–µ
    const orderForAdmin = await prisma.order.findUnique({
      where: { id: order.id }
    });

    console.log('\nüìà –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏:');
    console.log({
      id: orderForAdmin.id,
      customerName: orderForAdmin.customerName,
      customerEmail: orderForAdmin.customerEmail,
      customerPhone: orderForAdmin.customerPhone,
      customerCompany: orderForAdmin.customerCompany,
      totalAmount: orderForAdmin.totalAmount,
      items: orderForAdmin.items
    });

    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–∞–∑ –≤ –∞–¥–º–∏–Ω–∫–µ: http://localhost:3000/admin');
    
    return order.id;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCustomerFlow()
  .then(orderId => {
    console.log(`\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞: ${orderId}`);
  })
  .catch(error => {
    console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
    process.exit(1);
  });
