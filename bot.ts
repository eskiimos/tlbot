import { Telegraf } from 'telegraf';
import { prisma } from './src/lib/prisma';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN!);

console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from?.username || ctx.from?.first_name}`);
  
  const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Total Lookas!

üè¢ –ú—ã - –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã —Å –≤–∞—à–∏–º –ª–æ–≥–æ—Ç–∏–ø–æ–º.

üì± –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  await ctx.reply(welcomeMessage, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìñ –û –∫–æ–º–ø–∞–Ω–∏–∏', callback_data: 'about' },
          { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contact' }
        ],
        [
          { text: 'üëï –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' },
          { text: 'üí∞ –ü–æ–ª—É—á–∏—Ç—å –ö–ü', callback_data: 'proposal' }
        ]
      ]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
bot.action('about', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(`üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏ Total Lookas

–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –æ–¥–µ–∂–¥—ã:

‚úÖ –§—É—Ç–±–æ–ª–∫–∏, –ø–æ–ª–æ, —Ö—É–¥–∏
‚úÖ –ù–∞–Ω–µ—Å–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞
‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Å—Ä–æ–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã

–†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!`);
});

bot.action('contact', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(`üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

üìß Email: info@totallookas.com
üì± Telegram: @totalookas_support
üåê –°–∞–π—Ç: www.totallookas.com

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ü–ù-–ü–¢ 9:00-18:00`);
});

bot.action('catalog', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(`üëï –ù–∞—à –∫–∞—Ç–∞–ª–æ–≥:

üî∏ –§—É—Ç–±–æ–ª–∫–∏ (–æ—Ç 500‚ÇΩ)
üî∏ –ü–æ–ª–æ (–æ—Ç 800‚ÇΩ)  
üî∏ –•—É–¥–∏ (–æ—Ç 1200‚ÇΩ)
üî∏ –¢–æ–ª—Å—Ç–æ–≤–∫–∏ (–æ—Ç 1000‚ÇΩ)
üî∏ –ö—É—Ä—Ç–∫–∏ (–æ—Ç 2000‚ÇΩ)

–í—Å–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞.
–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É!`);
});

bot.action('proposal', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(`üí∞ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:

1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @totalookas_support
2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ:
   ‚Ä¢ –¢–∏–ø –∏–∑–¥–µ–ª–∏—è
   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã
   ‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø (–µ—Å–ª–∏ –µ—Å—Ç—å)

‚ö° –û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç!`);
});

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
bot.action('my_orders', async (ctx) => {
  await ctx.answerCbQuery();
  
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });

    if (!user) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }

    // –ò—â–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orders = await prisma.order.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    if (orders.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –ü–æ–ª—É—á–∏—Ç—å –ö–ü', callback_data: 'proposal' }]
          ]
        }
      });
      return;
    }

    let message = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
    const keyboard = [];

    for (const order of orders) {
      const statusEmoji = {
        'NEW': 'üìù',
        'IN_PROGRESS': '‚öôÔ∏è',
        'DESIGN': 'üé®',
        'PRODUCTION': 'üè≠',
        'READY': '‚úÖ',
        'COMPLETED': 'üéâ',
        'CANCELLED': '‚ùå'
      }[order.status] || 'üìÑ';

      message += `${statusEmoji} –ó–∞–∫–∞–∑ #${order.id.slice(-8)}\n`;
      message += `üë§ ${order.customerName}\n`;
      message += `üìÖ ${order.createdAt.toLocaleDateString('ru-RU')}\n`;
      message += `üí∞ ${(order.totalAmount / 100).toLocaleString('ru-RU')} ‚ÇΩ\n\n`;

      keyboard.push([
        { text: `üí¨ –ß–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É #${order.id.slice(-8)}`, callback_data: `chat_${order.id}` }
      ]);
    }

    keyboard.push([
      { text: 'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data: 'proposal' }
    ]);

    await ctx.reply(message, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–∫–∞–∑—É
bot.action(/^chat_(.+)$/, async (ctx) => {
  await ctx.answerCbQuery();
  
  const orderId = ctx.match[1];
  const telegramId = ctx.from?.id.toString();
  
  if (!telegramId) return;

  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });

    if (!user) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const order = await prisma.order.findFirst({
      where: { 
        id: orderId,
        userId: user.id 
      }
    });

    if (!order) {
      await ctx.reply('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    await prisma.userOrderContext.upsert({
      where: { userId: user.id },
      update: { orderId: orderId },
      create: { 
        userId: user.id,
        orderId: orderId 
      }
    });

    await ctx.reply(
      `üí¨ –ß–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É #${order.id.slice(-8)} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
      `üìã ${order.customerName}\n` +
      `üìÖ ${order.createdAt.toLocaleDateString('ru-RU')}\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.\n\n` +
      `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
              { text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç', callback_data: 'end_chat' }
            ]
          ]
        }
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–∞—Ç–∞.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞
bot.action('end_chat', async (ctx) => {
  await ctx.answerCbQuery();
  
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(telegramId) }
    });

    if (user) {
      await prisma.userOrderContext.upsert({
        where: { userId: user.id },
        update: { orderId: null },
        create: { 
          userId: user.id,
          orderId: null 
        }
      });
    }

    await ctx.reply('üí§ –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞.', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
            { text: 'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data: 'proposal' }
          ]
        ]
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const telegramId = ctx.from?.id.toString();
  const content = ctx.message.text;
  
  if (!telegramId || !content) return;

  try {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.upsert({
      where: { telegramId: BigInt(telegramId) },
      update: {
        username: ctx.from?.username || null,
        firstName: ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        lastName: ctx.from?.last_name || null,
      },
      create: {
        telegramId: BigInt(telegramId),
        username: ctx.from?.username || null,
        firstName: ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        lastName: ctx.from?.last_name || null,
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
    await prisma.message.create({
      data: {
        telegramId: BigInt(telegramId),
        content: content,
        type: 'TEXT',
        userId: user.id
      }
    });

    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orderContext = await prisma.userOrderContext.findUnique({
      where: { userId: user.id }
    });

    if (orderContext && orderContext.orderId) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
      await prisma.orderComment.create({
        data: {
          orderId: orderContext.orderId,
          content: content,
          isAdmin: false,
          authorName: `${user.firstName} ${user.lastName || ''}`.trim(),
          telegramMessageId: ctx.message.message_id.toString()
        }
      });

      await ctx.reply(
        `‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!\n\n` +
        `üìù "${content}"\n\n` +
        `üí¨ –û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' },
                { text: 'üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data: 'proposal' }
              ]
            ]
          }
        }
      );
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
      await ctx.reply(
        `üëã –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n` +
        `–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üí∞ –ü–æ–ª—É—á–∏—Ç—å –ö–ü', callback_data: 'proposal' },
                { text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', callback_data: 'contact' }
              ],
              [
                { text: 'üìñ –û –∫–æ–º–ø–∞–Ω–∏–∏', callback_data: 'about' },
                { text: 'üëï –ö–∞—Ç–∞–ª–æ–≥', callback_data: 'catalog' }
              ]
            ]
          }
        }
      );
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start');
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
export { bot };
