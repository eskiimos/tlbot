const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkRecentOrders() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    const orders = await prisma.order.findMany({
      orderBy: { createdAt: 'desc' },
      take: 5
    });

    if (orders.length === 0) {
      console.log('üì≠ –ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${orders.length}\n`);

    orders.forEach((order, index) => {
      console.log(`üìã –ó–∞–∫–∞–∑ ${index + 1}:`);
      console.log(`   ID: ${order.id}`);
      console.log(`   –ö–ª–∏–µ–Ω—Ç: ${order.customerName}`);
      console.log(`   Email: ${order.customerEmail || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customerPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –ö–æ–º–ø–∞–Ω–∏—è: ${order.customerCompany || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –ò–ù–ù: ${order.customerInn || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –°—É–º–º–∞: ${(order.totalAmount / 100).toLocaleString('ru-RU')}‚ÇΩ`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${order.status}`);
      console.log(`   –¢–æ–≤–∞—Ä–æ–≤: ${order.items ? order.items.length : 0}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${order.createdAt.toLocaleString('ru-RU')}`);
      console.log('');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞
    const lastOrder = orders[0];
    if (lastOrder.items && lastOrder.items.length > 0) {
      console.log('üõçÔ∏è –î–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞:');
      lastOrder.items.forEach((item, index) => {
        console.log(`   –¢–æ–≤–∞—Ä ${index + 1}: ${item.name} x${item.quantity} = ${item.totalPrice?.toLocaleString('ru-RU') || 'N/A'}‚ÇΩ`);
        if (item.optionsDetails && item.optionsDetails.length > 0) {
          item.optionsDetails.forEach(option => {
            console.log(`     - ${option.name}: ${option.value} ${option.priceModifier > 0 ? `(+${option.priceModifier}‚ÇΩ)` : ''}`);
          });
        }
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkRecentOrders();
