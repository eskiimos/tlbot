import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function createAdmin() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await prisma.admin.findFirst();
    if (existingAdmin) {
      console.log('–ê–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.username);
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const username = 'admin';
    const password = 'admin123'; // –ü–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 10);

    const admin = await prisma.admin.create({
      data: {
        username,
        password: hashedPassword
      }
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('–õ–æ–≥–∏–Ω:', username);
    console.log('–ü–∞—Ä–æ–ª—å:', password);
    console.log('üîí –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createAdmin();
