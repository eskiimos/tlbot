import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function fixDesignPrices() {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –æ–ø—Ü–∏–∏ "–ù—É–∂–µ–Ω –¥–∏–∑–∞–π–Ω" –Ω–∞ 0 –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const result = await prisma.productOption.updateMany({
      where: {
        category: 'design',
        name: '–ù—É–∂–µ–Ω –¥–∏–∑–∞–π–Ω'
      },
      data: {
        price: 0
      }
    });

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.count} –æ–ø—Ü–∏–π "–ù—É–∂–µ–Ω –¥–∏–∑–∞–π–Ω" - —Ü–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 0`);

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedOptions = await prisma.productOption.findMany({
      where: {
        category: 'design',
        name: '–ù—É–∂–µ–Ω –¥–∏–∑–∞–π–Ω'
      },
      include: {
        product: {
          select: {
            name: true
          }
        }
      }
    });

    console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏:');
    updatedOptions.forEach(option => {
      console.log(`- ${option.product.name}: "${option.name}" - —Ü–µ–Ω–∞: ${option.price} —Ä—É–±.`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω:', error);
  } finally {
    await prisma.$disconnect();
  }
}

fixDesignPrices();
