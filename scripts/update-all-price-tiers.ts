#!/usr/bin/env tsx

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function updateAllProductPriceTiers() {
  try {
    console.log('üè∑Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    const products = await prisma.product.findMany({
      include: {
        priceTiers: true
      }
    });

    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);

    for (const product of products) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${product.name}`);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
      await prisma.priceTier.deleteMany({
        where: {
          productId: product.id
        }
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
      let basePrice = 900; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ—É—Ç–±–æ–ª–æ–∫
      
      switch (product.slug) {
        case 't-shirt':
          basePrice = 900;
          break;
        case 'longsleeve':
          basePrice = 1100;
          break;
        case 'sweatshirt':
          basePrice = 1300;
          break;
        case 'hoodies':
          basePrice = 1500;
          break;
        case 'halfzip':
          basePrice = 1600;
          break;
        case 'pants':
          basePrice = 1800;
          break;
        case 'shorts':
          basePrice = 1000;
          break;
        default:
          basePrice = 1000; // –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
      }

      // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      const priceTiers = [
        {
          minQuantity: 10,
          maxQuantity: 24,
          price: Math.round(basePrice * 1.5), // +50% –∫ –±–∞–∑–æ–≤–æ–π
          productId: product.id
        },
        {
          minQuantity: 25,
          maxQuantity: 49,
          price: Math.round(basePrice * 1.4), // +40% –∫ –±–∞–∑–æ–≤–æ–π
          productId: product.id
        },
        {
          minQuantity: 50,
          maxQuantity: 74,
          price: Math.round(basePrice * 1.3), // +30% –∫ –±–∞–∑–æ–≤–æ–π
          productId: product.id
        },
        {
          minQuantity: 75,
          maxQuantity: 99,
          price: Math.round(basePrice * 1.2), // +20% –∫ –±–∞–∑–æ–≤–æ–π
          productId: product.id
        },
        {
          minQuantity: 100,
          maxQuantity: null, // –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
          price: basePrice, // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
          productId: product.id
        }
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
      for (const tier of priceTiers) {
        await prisma.priceTier.create({
          data: tier
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É
      await prisma.product.update({
        where: { id: product.id },
        data: {
          price: priceTiers[0].price // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞
        }
      });

      console.log(`‚úÖ ${product.name}: ${priceTiers[0].price}‚ÇΩ - ${basePrice}‚ÇΩ (5 —É—Ä–æ–≤–Ω–µ–π)`);
    }

    console.log('\nüéâ –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateAllProductPriceTiers();
