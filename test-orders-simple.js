// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∑–∞–∫–∞–∑–æ–≤ (Node.js 18+)
const baseURL = 'http://localhost:3000';

async function testOrdersAPI() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∑–∞–∫–∞–∑–æ–≤...\n');
    
    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É)
    console.log('1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    try {
      const response = await fetch(`${baseURL}/api/admin/orders`);
      if (response.status === 401) {
        console.log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –¥–æ—Å—Ç—É–ø –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)');
      } else {
        console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å:', response.status);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ –ë–î —á–µ—Ä–µ–∑ webhook —Å–∏–º—É–ª—è—Ü–∏—é
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –ë–î —á–µ—Ä–µ–∑ webhook —Å–∏–º—É–ª—è—Ü–∏—é:');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–∫–∞–∑–æ–º
    const webhookData = {
      update_id: 123456,
      callback_query: {
        id: 'test_callback',
        from: {
          id: 123456789, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
          first_name: '–¢–µ—Å—Ç',
          username: 'testuser'
        },
        data: 'my_orders',
        message: {
          message_id: 1,
          date: Math.floor(Date.now() / 1000),
          chat: {
            id: 123456789,
            type: 'private'
          },
          text: 'test'
        }
      }
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –¥–ª—è "my_orders" action...');
    
    try {
      const webhookResponse = await fetch(`${baseURL}/api/bot`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(webhookData)
      });
      
      console.log('‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      console.log('–°—Ç–∞—Ç—É—Å:', webhookResponse.status);
      
      if (webhookResponse.ok) {
        const result = await webhookResponse.text();
        console.log('–û—Ç–≤–µ—Ç:', result || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è webhook)');
      } else {
        const errorText = await webhookResponse.text();
        console.log('–û—à–∏–±–∫–∞:', errorText);
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ webhook:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testOrdersAPI();