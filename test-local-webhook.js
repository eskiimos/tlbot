// –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ webhook'–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

const baseURL = 'http://localhost:3000';

async function testLocalWebhook() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π webhook —Å –∫–æ–º–∞–Ω–¥–æ–π /start...\n');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    const startData = {
      update_id: Date.now(),
      message: {
        message_id: Date.now(),
        from: {
          id: 123456789,
          first_name: '–¢–µ—Å—Ç',
          username: 'testuser',
          is_bot: false
        },
        chat: {
          id: 123456789,
          first_name: '–¢–µ—Å—Ç',
          username: 'testuser',
          type: 'private'
        },
        date: Math.floor(Date.now() / 1000),
        text: '/start',
        entities: [{
          offset: 0,
          length: 6,
          type: 'bot_command'
        }]
      }
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start...');
    
    const response = await fetch(`${baseURL}/api/bot`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(startData)
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (response.ok) {
      const result = await response.text();
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      console.log('–û—Ç–≤–µ—Ç:', result || '(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
    } else {
      const error = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testLocalWebhook();

async function testLocalWebhook() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π webhook —Å –∫–æ–º–∞–Ω–¥–æ–π /start...\n');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    const startData = {
      update_id: Date.now(),
      message: {
        message_id: Date.now(),
        from: {
          id: 123456789,
          first_name: '–¢–µ—Å—Ç',
          username: 'testuser',
          is_bot: false
        },
        chat: {
          id: 123456789,
          first_name: '–¢–µ—Å—Ç',
          username: 'testuser',
          type: 'private'
        },
        date: Math.floor(Date.now() / 1000),
        text: '/start',
        entities: [{
          offset: 0,
          length: 6,
          type: 'bot_command'
        }]
      }
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /start...');
    
    const response = await fetch(`${baseURL}/api/bot`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(startData)
    });
    
    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    
    if (response.ok) {
      const result = await response.text();
      console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      console.log('–û—Ç–≤–µ—Ç:', result || '(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
    } else {
      const error = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞:', error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testLocalWebhook();